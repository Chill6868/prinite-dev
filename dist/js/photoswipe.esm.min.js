"use strict";function ownKeys(e,t){var i,n=Object.keys(e);return Object.getOwnPropertySymbols&&(i=Object.getOwnPropertySymbols(e),t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)),n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(i),!0).forEach(function(t){_defineProperty(e,t,i[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))})}return e}function _defineProperty(t,e,i){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function _callSuper(t,e,i){return e=_getPrototypeOf(e),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(e,i||[],_getPrototypeOf(t).constructor):e.apply(t,i))}function _possibleConstructorReturn(t,e){if(e&&("object"==_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,i){return e&&_defineProperties(t.prototype,e),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"==_typeof(t)?t:t+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var i=t[Symbol.toPrimitive];if(void 0===i)return("string"===e?String:Number)(t);i=i.call(t,e||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}function createElement(t,e,i){e=document.createElement(e);return t&&(e.className=t),i&&i.appendChild(e),e}function equalizePoints(t,e){return t.x=e.x,t.y=e.y,void 0!==e.id&&(t.id=e.id),t}function roundPoint(t){t.x=Math.round(t.x),t.y=Math.round(t.y)}function getDistanceBetween(t,e){var i=Math.abs(t.x-e.x),t=Math.abs(t.y-e.y);return Math.sqrt(i*i+t*t)}function pointsEqual(t,e){return t.x===e.x&&t.y===e.y}function clamp(t,e,i){return Math.min(Math.max(t,e),i)}function toTransformString(t,e,i){t="translate3d(".concat(t,"px,").concat(e||0,"px,0)");return void 0!==i&&(t+=" scale3d(".concat(i,",").concat(i,",1)")),t}function setTransform(t,e,i,n){t.style.transform=toTransformString(e,i,n)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var defaultCSSEasing="cubic-bezier(.4,0,.22,1)";function setTransitionStyle(t,e,i,n){t.style.transition=e?"".concat(e," ").concat(i,"ms ").concat(n||defaultCSSEasing):"none"}function setWidthHeight(t,e,i){t.style.width="number"==typeof e?"".concat(e,"px"):e,t.style.height="number"==typeof i?"".concat(i,"px"):i}function removeTransitionStyle(t){setTransitionStyle(t)}function decodeImage(i){return"decode"in i?i.decode().catch(function(){}):i.complete?Promise.resolve(i):new Promise(function(t,e){i.onload=function(){return t(i)},i.onerror=e})}var LOAD_STATE={IDLE:"idle",LOADING:"loading",LOADED:"loaded",ERROR:"error"};function specialKeyUsed(t){return"button"in t&&1===t.button||t.ctrlKey||t.metaKey||t.altKey||t.shiftKey}function getElementsFromOption(t,e){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:document,n=[];return t instanceof Element?n=[t]:t instanceof NodeList||Array.isArray(t)?n=Array.from(t):(t="string"==typeof t?t:e)&&(n=Array.from(i.querySelectorAll(t))),n}function isSafari(){return!(!navigator.vendor||!navigator.vendor.match(/apple/i))}var supportsPassive=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){supportsPassive=!0}}))}catch(t){}var DOMEvents=function(){return _createClass(function t(){_classCallCheck(this,t),this._pool=[]},[{key:"add",value:function(t,e,i,n){this._toggleListener(t,e,i,n)}},{key:"remove",value:function(t,e,i,n){this._toggleListener(t,e,i,n,!0)}},{key:"removeAll",value:function(){var e=this;this._pool.forEach(function(t){e._toggleListener(t.target,t.type,t.listener,t.passive,!0,!0)}),this._pool=[]}},{key:"_toggleListener",value:function(i,t,n,s,o,a){var r,l=this;i&&(r=o?"removeEventListener":"addEventListener",t.split(" ").forEach(function(e){var t;e&&(a||(o?l._pool=l._pool.filter(function(t){return t.type!==e||t.listener!==n||t.target!==i}):l._pool.push({target:i,type:e,listener:n,passive:s})),t=!!supportsPassive&&{passive:s||!1},i[r](e,n,t))}))}}])}();function getViewportSize(t,e){if(t.getViewportSizeFn){t=t.getViewportSizeFn(t,e);if(t)return t}return{x:document.documentElement.clientWidth,y:window.innerHeight}}function parsePaddingOption(t,e,i,n,s){var o=0;return e.paddingFn?o=e.paddingFn(i,n,s)[t]:e.padding?o=e.padding[t]:e[i="padding"+t[0].toUpperCase()+t.slice(1)]&&(o=e[i]),Number(o)||0}function getPanAreaSize(t,e,i,n){return{x:e.x-parsePaddingOption("left",t,e,i,n)-parsePaddingOption("right",t,e,i,n),y:e.y-parsePaddingOption("top",t,e,i,n)-parsePaddingOption("bottom",t,e,i,n)}}var PanBounds=function(){return _createClass(function t(e){_classCallCheck(this,t),this.slide=e,this.currZoomLevel=1,this.center={x:0,y:0},this.max={x:0,y:0},this.min={x:0,y:0}},[{key:"update",value:function(t){this.currZoomLevel=t,this.slide.width?(this._updateAxis("x"),this._updateAxis("y"),this.slide.pswp.dispatch("calcBounds",{slide:this.slide})):this.reset()}},{key:"_updateAxis",value:function(t){var e=this.slide.pswp,i=this.slide["x"===t?"width":"height"]*this.currZoomLevel,e=parsePaddingOption("x"===t?"left":"top",e.options,e.viewportSize,this.slide.data,this.slide.index),n=this.slide.panAreaSize[t];this.center[t]=Math.round((n-i)/2)+e,this.max[t]=n<i?Math.round(n-i)+e:this.center[t],this.min[t]=n<i?e:this.center[t]}},{key:"reset",value:function(){this.center.x=0,this.center.y=0,this.max.x=0,this.max.y=0,this.min.x=0,this.min.y=0}},{key:"correctPan",value:function(t,e){return clamp(e,this.max[t],this.min[t])}}])}(),MAX_IMAGE_WIDTH=4e3,ZoomLevel=function(){return _createClass(function t(e,i,n,s){_classCallCheck(this,t),this.pswp=s,this.options=e,this.itemData=i,this.index=n,this.panAreaSize=null,this.elementSize=null,this.fit=1,this.fill=1,this.vFill=1,this.initial=1,this.secondary=1,this.max=1,this.min=1},[{key:"update",value:function(t,e,i){t={x:t,y:e},this.elementSize=t,e=(this.panAreaSize=i).x/t.x,i=i.y/t.y;this.fit=Math.min(1,e<i?e:i),this.fill=Math.min(1,i<e?e:i),this.vFill=Math.min(1,i),this.initial=this._getInitial(),this.secondary=this._getSecondary(),this.max=Math.max(this.initial,this.secondary,this._getMax()),this.min=Math.min(this.fit,this.initial,this.secondary),this.pswp&&this.pswp.dispatch("zoomLevelsUpdate",{zoomLevels:this,slideData:this.itemData})}},{key:"_parseZoomLevelOption",value:function(t){t=this.options[t+"ZoomLevel"];if(t)return"function"==typeof t?t(this):"fill"===t?this.fill:"fit"===t?this.fit:Number(t)}},{key:"_getSecondary",value:function(){var t=this._parseZoomLevelOption("secondary");return t||(t=Math.min(1,3*this.fit),this.elementSize&&t*this.elementSize.x>MAX_IMAGE_WIDTH&&(t=MAX_IMAGE_WIDTH/this.elementSize.x)),t}},{key:"_getInitial",value:function(){return this._parseZoomLevelOption("initial")||this.fit}},{key:"_getMax",value:function(){return this._parseZoomLevelOption("max")||Math.max(1,4*this.fit)}}])}(),Slide=function(){return _createClass(function t(e,i,n){_classCallCheck(this,t),this.data=e,this.index=i,this.pswp=n,this.isActive=i===n.currIndex,this.currentResolution=0,this.panAreaSize={x:0,y:0},this.pan={x:0,y:0},this.isFirstSlide=this.isActive&&!n.opener.isOpen,this.zoomLevels=new ZoomLevel(n.options,e,i,n),this.pswp.dispatch("gettingData",{slide:this,data:this.data,index:i}),this.content=this.pswp.contentLoader.getContentBySlide(this),this.container=createElement("pswp__zoom-wrap","div"),this.holderElement=null,this.currZoomLevel=1,this.width=this.content.width,this.height=this.content.height,this.heavyAppended=!1,this.bounds=new PanBounds(this),this.prevDisplayedWidth=-1,this.prevDisplayedHeight=-1,this.pswp.dispatch("slideInit",{slide:this})},[{key:"setIsActive",value:function(t){t&&!this.isActive?this.activate():!t&&this.isActive&&this.deactivate()}},{key:"append",value:function(t){this.holderElement=t,this.container.style.transformOrigin="0 0",this.data&&(this.calculateSize(),this.load(),this.updateContentSize(),this.appendHeavy(),this.holderElement.appendChild(this.container),this.zoomAndPanToInitial(),this.pswp.dispatch("firstZoomPan",{slide:this}),this.applyCurrentZoomPan(),this.pswp.dispatch("afterSetContent",{slide:this}),this.isActive)&&this.activate()}},{key:"load",value:function(){this.content.load(!1),this.pswp.dispatch("slideLoad",{slide:this})}},{key:"appendHeavy",value:function(){var t=this.pswp;this.heavyAppended||!t.opener.isOpen||t.mainScroll.isShifted()||(this.isActive,0)||(this.pswp.dispatch("appendHeavy",{slide:this}).defaultPrevented||(this.heavyAppended=!0,this.content.append(),this.pswp.dispatch("appendHeavyContent",{slide:this})))}},{key:"activate",value:function(){this.isActive=!0,this.appendHeavy(),this.content.activate(),this.pswp.dispatch("slideActivate",{slide:this})}},{key:"deactivate",value:function(){this.isActive=!1,this.content.deactivate(),this.currZoomLevel!==this.zoomLevels.initial&&this.calculateSize(),this.currentResolution=0,this.zoomAndPanToInitial(),this.applyCurrentZoomPan(),this.updateContentSize(),this.pswp.dispatch("slideDeactivate",{slide:this})}},{key:"destroy",value:function(){this.content.hasSlide=!1,this.content.remove(),this.container.remove(),this.pswp.dispatch("slideDestroy",{slide:this})}},{key:"resize",value:function(){this.currZoomLevel!==this.zoomLevels.initial&&this.isActive?(this.calculateSize(),this.bounds.update(this.currZoomLevel),this.panTo(this.pan.x,this.pan.y)):(this.calculateSize(),this.currentResolution=0,this.zoomAndPanToInitial(),this.applyCurrentZoomPan(),this.updateContentSize())}},{key:"updateContentSize",value:function(t){var e,i=this.currentResolution||this.zoomLevels.initial;i&&(e=Math.round(this.width*i)||this.pswp.viewportSize.x,i=Math.round(this.height*i)||this.pswp.viewportSize.y,this.sizeChanged(e,i)||t)&&this.content.setDisplayedSize(e,i)}},{key:"sizeChanged",value:function(t,e){return(t!==this.prevDisplayedWidth||e!==this.prevDisplayedHeight)&&(this.prevDisplayedWidth=t,this.prevDisplayedHeight=e,!0)}},{key:"getPlaceholderElement",value:function(){var t;return null==(t=this.content.placeholder)?void 0:t.element}},{key:"zoomTo",value:function(t,e,i,n){var s,o=this,a=this.pswp;this.isZoomable()&&!a.mainScroll.isShifted()&&(a.dispatch("beforeZoomTo",{destZoomLevel:t,centerPoint:e,transitionDuration:i}),a.animations.stopAllPan(),s=this.currZoomLevel,n||(t=clamp(t,this.zoomLevels.min,this.zoomLevels.max)),this.setZoomLevel(t),this.pan.x=this.calculateZoomToPanOffset("x",e,s),this.pan.y=this.calculateZoomToPanOffset("y",e,s),roundPoint(this.pan),n=function(){o._setResolution(t),o.applyCurrentZoomPan()},i?a.animations.startTransition({isPan:!0,name:"zoomTo",target:this.container,transform:this.getCurrentTransform(),onComplete:n,duration:i,easing:a.options.easing}):n())}},{key:"toggleZoom",value:function(t){this.zoomTo(this.currZoomLevel===this.zoomLevels.initial?this.zoomLevels.secondary:this.zoomLevels.initial,t,this.pswp.options.zoomAnimationDuration)}},{key:"setZoomLevel",value:function(t){this.currZoomLevel=t,this.bounds.update(this.currZoomLevel)}},{key:"calculateZoomToPanOffset",value:function(t,e,i){if(0==this.bounds.max[t]-this.bounds.min[t])return this.bounds.center[t];e=e||this.pswp.getViewportCenterPoint(),i=i||this.zoomLevels.initial;i=this.currZoomLevel/i;return this.bounds.correctPan(t,(this.pan[t]-e[t])*i+e[t])}},{key:"panTo",value:function(t,e){this.pan.x=this.bounds.correctPan("x",t),this.pan.y=this.bounds.correctPan("y",e),this.applyCurrentZoomPan()}},{key:"isPannable",value:function(){return Boolean(this.width)&&this.currZoomLevel>this.zoomLevels.fit}},{key:"isZoomable",value:function(){return Boolean(this.width)&&this.content.isZoomable()}},{key:"applyCurrentZoomPan",value:function(){this._applyZoomTransform(this.pan.x,this.pan.y,this.currZoomLevel),this===this.pswp.currSlide&&this.pswp.dispatch("zoomPanUpdate",{slide:this})}},{key:"zoomAndPanToInitial",value:function(){this.currZoomLevel=this.zoomLevels.initial,this.bounds.update(this.currZoomLevel),equalizePoints(this.pan,this.bounds.center),this.pswp.dispatch("initialZoomPan",{slide:this})}},{key:"_applyZoomTransform",value:function(t,e,i){i/=this.currentResolution||this.zoomLevels.initial,setTransform(this.container,t,e,i)}},{key:"calculateSize",value:function(){var t=this.pswp;equalizePoints(this.panAreaSize,getPanAreaSize(t.options,t.viewportSize,this.data,this.index)),this.zoomLevels.update(this.width,this.height,this.panAreaSize),t.dispatch("calcSlideSize",{slide:this})}},{key:"getCurrentTransform",value:function(){var t=this.currZoomLevel/(this.currentResolution||this.zoomLevels.initial);return toTransformString(this.pan.x,this.pan.y,t)}},{key:"_setResolution",value:function(t){t!==this.currentResolution&&(this.currentResolution=t,this.updateContentSize(),this.pswp.dispatch("resolutionChanged"))}}])}(),PAN_END_FRICTION=.35,VERTICAL_DRAG_FRICTION=.6,MIN_RATIO_TO_CLOSE=.4,MIN_NEXT_SLIDE_SPEED=.5;function project(t,e){return t*e/(1-e)}var DragHandler=function(){return _createClass(function t(e){_classCallCheck(this,t),this.gestures=e,this.pswp=e.pswp,this.startPan={x:0,y:0}},[{key:"start",value:function(){this.pswp.currSlide&&equalizePoints(this.startPan,this.pswp.currSlide.pan),this.pswp.animations.stopAll()}},{key:"change",value:function(){var t=this.gestures,e=t.p1,i=t.prevP1,t=t.dragAxis,n=this.pswp.currSlide;"y"===t&&this.pswp.options.closeOnVerticalDrag&&n&&n.currZoomLevel<=n.zoomLevels.fit&&!this.gestures.isMultitouch?(t=n.pan.y+(e.y-i.y),this.pswp.dispatch("verticalDrag",{panY:t}).defaultPrevented||(this._setPanWithFriction("y",t,VERTICAL_DRAG_FRICTION),e=1-Math.abs(this._getVerticalDragRatio(n.pan.y)),this.pswp.applyBgOpacity(e),n.applyCurrentZoomPan())):this._panOrMoveMainScroll("x")||(this._panOrMoveMainScroll("y"),n&&(roundPoint(n.pan),n.applyCurrentZoomPan()))}},{key:"end",value:function(){var t,e=this.gestures.velocity,i=this.pswp,n=i.mainScroll,i=i.currSlide,s=0;this.pswp.animations.stopAll(),n.isShifted()&&(t=(n.x-n.getCurrSlideX())/this.pswp.viewportSize.x,e.x<-MIN_NEXT_SLIDE_SPEED&&t<0||e.x<.1&&t<-.5?(s=1,e.x=Math.min(e.x,0)):(e.x>MIN_NEXT_SLIDE_SPEED&&0<t||-.1<e.x&&.5<t)&&(s=-1,e.x=Math.max(e.x,0)),n.moveIndexBy(s,!0,e.x)),i&&i.currZoomLevel>i.zoomLevels.max||this.gestures.isMultitouch?this.gestures.zoomLevels.correctZoomPan(!0):(this._finishPanGestureForAxis("x"),this._finishPanGestureForAxis("y"))}},{key:"_finishPanGestureForAxis",value:function(e){var i=this,t=this.gestures.velocity,n=this.pswp.currSlide;if(n){var s=n.pan,o=n.bounds,a=s[e],r=this.pswp.bgOpacity<1&&"y"===e,l=a+project(t[e],.995);if(r){var h=this._getVerticalDragRatio(a),c=this._getVerticalDragRatio(l);if(h<0&&c<-MIN_RATIO_TO_CLOSE||0<h&&MIN_RATIO_TO_CLOSE<c)return void this.pswp.close()}var p,u,d=o.correctPan(e,l);a!==d&&(p=this.pswp.bgOpacity,u=d-a,this.pswp.animations.startSpring({name:"panGesture"+e,isPan:!0,start:a,end:d,velocity:t[e],dampingRatio:d===l?1:.82,onUpdate:function(t){r&&i.pswp.bgOpacity<1&&i.pswp.applyBgOpacity(clamp(p+(1-p)*(1-(d-t)/u),0,1)),s[e]=Math.floor(t),n.applyCurrentZoomPan()}}))}}},{key:"_panOrMoveMainScroll",value:function(t){var e=this.gestures,i=e.p1,n=e.dragAxis,s=e.prevP1,e=e.isMultitouch,o=this.pswp,a=o.currSlide,o=o.mainScroll,i=i[t]-s[t],s=o.x+i;if(i&&a){if("x"===t&&!a.isPannable()&&!e)return o.moveTo(s,!0),!0;var r=a.bounds,a=a.pan[t]+i;if(this.pswp.options.allowPanToNext&&"x"===n&&"x"===t&&!e){var n=o.getCurrSlideX(),e=o.x-n,i=0<i,l=!i;if(a>r.min[t]&&i){if(r.min[t]<=this.startPan[t])return o.moveTo(s,!0),!0;this._setPanWithFriction(t,a)}else if(a<r.max[t]&&l){if(this.startPan[t]<=r.max[t])return o.moveTo(s,!0),!0;this._setPanWithFriction(t,a)}else if(0!=e){if(0<e)return o.moveTo(Math.max(s,n),!0),!0;if(e<0)return o.moveTo(Math.min(s,n),!0),!0}else this._setPanWithFriction(t,a)}else"y"===t&&(o.isShifted()||r.min.y===r.max.y)||this._setPanWithFriction(t,a)}return!1}},{key:"_getVerticalDragRatio",value:function(t){return(t-(null!=(t=null==(t=this.pswp.currSlide)?void 0:t.bounds.center.y)?t:0))/(this.pswp.viewportSize.y/3)}},{key:"_setPanWithFriction",value:function(t,e,i){var n,s=this.pswp.currSlide;s&&(n=s.pan,s.bounds.correctPan(t,e)!==e||i?(s=Math.round(e-n[t]),n[t]+=s*(i||PAN_END_FRICTION)):n[t]=e)}}])}(),UPPER_ZOOM_FRICTION=.05,LOWER_ZOOM_FRICTION=.15;function getZoomPointsCenter(t,e,i){return t.x=(e.x+i.x)/2,t.y=(e.y+i.y)/2,t}var ZoomHandler=function(){return _createClass(function t(e){_classCallCheck(this,t),this.gestures=e,this._startPan={x:0,y:0},this._startZoomPoint={x:0,y:0},this._zoomPoint={x:0,y:0},this._wasOverFitZoomLevel=!1,this._startZoomLevel=1},[{key:"start",value:function(){var t=this.gestures.pswp.currSlide;t&&(this._startZoomLevel=t.currZoomLevel,equalizePoints(this._startPan,t.pan)),this.gestures.pswp.animations.stopAllPan(),this._wasOverFitZoomLevel=!1}},{key:"change",value:function(){var t,e,i=this.gestures,n=i.p1,s=i.startP1,o=i.p2,a=i.startP2,i=i.pswp,r=i.currSlide;r&&(t=r.zoomLevels.min,e=r.zoomLevels.max,r.isZoomable())&&!i.mainScroll.isShifted()&&(getZoomPointsCenter(this._startZoomPoint,s,a),getZoomPointsCenter(this._zoomPoint,n,o),(s=1/getDistanceBetween(s,a)*getDistanceBetween(n,o)*this._startZoomLevel)>r.zoomLevels.initial+r.zoomLevels.initial/15&&(this._wasOverFitZoomLevel=!0),s<t?i.options.pinchToClose&&!this._wasOverFitZoomLevel&&this._startZoomLevel<=r.zoomLevels.initial?i.dispatch("pinchClose",{bgOpacity:a=1-(t-s)/(t/1.2)}).defaultPrevented||i.applyBgOpacity(a):s=t-(t-s)*LOWER_ZOOM_FRICTION:e<s&&(s=e+(s-e)*UPPER_ZOOM_FRICTION),r.pan.x=this._calculatePanForZoomLevel("x",s),r.pan.y=this._calculatePanForZoomLevel("y",s),r.setZoomLevel(s),r.applyCurrentZoomPan())}},{key:"end",value:function(){var t=this.gestures.pswp,e=t.currSlide;(!e||e.currZoomLevel<e.zoomLevels.initial)&&!this._wasOverFitZoomLevel&&t.options.pinchToClose?t.close():this.correctZoomPan()}},{key:"_calculatePanForZoomLevel",value:function(t,e){e/=this._startZoomLevel;return this._zoomPoint[t]-(this._startZoomPoint[t]-this._startPan[t])*e}},{key:"correctZoomPan",value:function(t){var i,n,s,o,a,r,l,h,c=this.gestures.pswp,p=c.currSlide;null!=p&&p.isZoomable()&&(0===this._zoomPoint.x&&(t=!0),i=p.currZoomLevel,n=!0,s=i<p.zoomLevels.initial?p.zoomLevels.initial:i>p.zoomLevels.max?p.zoomLevels.max:(n=!1,i),o=c.bgOpacity,a=c.bgOpacity<1,r=equalizePoints({x:0,y:0},p.pan),l=equalizePoints({x:0,y:0},r),t&&(this._zoomPoint.x=0,this._zoomPoint.y=0,this._startZoomPoint.x=0,this._startZoomPoint.y=0,this._startZoomLevel=i,equalizePoints(this._startPan,r)),n&&(l={x:this._calculatePanForZoomLevel("x",s),y:this._calculatePanForZoomLevel("y",s)}),p.setZoomLevel(s),l={x:p.bounds.correctPan("x",l.x),y:p.bounds.correctPan("y",l.y)},p.setZoomLevel(i),(h=!pointsEqual(l,r))||n||a?(c.animations.stopAllPan(),c.animations.startSpring({isPan:!0,start:0,end:1e3,velocity:0,dampingRatio:1,naturalFrequency:40,onUpdate:function(t){var e;t/=1e3,(h||n)&&(h&&(p.pan.x=r.x+(l.x-r.x)*t,p.pan.y=r.y+(l.y-r.y)*t),n&&(e=i+(s-i)*t,p.setZoomLevel(e)),p.applyCurrentZoomPan()),a&&c.bgOpacity<1&&c.applyBgOpacity(clamp(o+(1-o)*t,0,1))},onComplete:function(){p._setResolution(s),p.applyCurrentZoomPan()}})):(p._setResolution(s),p.applyCurrentZoomPan()))}}])}();function didTapOnMainContent(t){return!!t.target.closest(".pswp__container")}var TapHandler=function(){return _createClass(function t(e){_classCallCheck(this,t),this.gestures=e},[{key:"click",value:function(t,e){var i=e.target.classList,n=i.contains("pswp__img"),i=i.contains("pswp__item")||i.contains("pswp__zoom-wrap");n?this._doClickOrTapAction("imageClick",t,e):i&&this._doClickOrTapAction("bgClick",t,e)}},{key:"tap",value:function(t,e){didTapOnMainContent(e)&&this._doClickOrTapAction("tap",t,e)}},{key:"doubleTap",value:function(t,e){didTapOnMainContent(e)&&this._doClickOrTapAction("doubleTap",t,e)}},{key:"_doClickOrTapAction",value:function(t,e,i){var n,s=this.gestures.pswp,o=s.currSlide,t=t+"Action",a=s.options[t];if(!s.dispatch(t,{point:e,originalEvent:i}).defaultPrevented)if("function"==typeof a)a.call(s,e,i);else switch(a){case"close":case"next":s[a]();break;case"zoom":null!=o&&o.toggleZoom(e);break;case"zoom-or-close":null!=o&&o.isZoomable()&&o.zoomLevels.secondary!==o.zoomLevels.initial?o.toggleZoom(e):s.options.clickToCloseNonZoomable&&s.close();break;case"toggle-controls":null!=(n=this.gestures.pswp.element)&&n.classList.toggle("pswp--ui-visible")}}}])}(),AXIS_SWIPE_HYSTERISIS=10,DOUBLE_TAP_DELAY=300,MIN_TAP_DISTANCE=25,Gestures=function(){return _createClass(function t(e){var i=this;_classCallCheck(this,t),this.pswp=e,this.dragAxis=null,this.p1={x:0,y:0},this.p2={x:0,y:0},this.prevP1={x:0,y:0},this.prevP2={x:0,y:0},this.startP1={x:0,y:0},this.startP2={x:0,y:0},this.velocity={x:0,y:0},this._lastStartP1={x:0,y:0},this._intervalP1={x:0,y:0},this._numActivePoints=0,this._ongoingPointers=[],this._touchEventEnabled="ontouchstart"in window,this._pointerEventEnabled=!!window.PointerEvent,this.supportsTouch=this._touchEventEnabled||this._pointerEventEnabled&&1<navigator.maxTouchPoints,this._numActivePoints=0,this._intervalTime=0,this._velocityCalculated=!1,this.isMultitouch=!1,this.isDragging=!1,this.isZooming=!1,this.raf=null,this._tapTimer=null,this.supportsTouch||(e.options.allowPanToNext=!1),this.drag=new DragHandler(this),this.zoomLevels=new ZoomHandler(this),this.tapHandler=new TapHandler(this),e.on("bindEvents",function(){e.events.add(e.scrollWrap,"click",i._onClick.bind(i)),i._pointerEventEnabled?i._bindEvents("pointer","down","up","cancel"):i._touchEventEnabled?(i._bindEvents("touch","start","end","cancel"),e.scrollWrap&&(e.scrollWrap.ontouchmove=function(){},e.scrollWrap.ontouchend=function(){})):i._bindEvents("mouse","down","up")})},[{key:"_bindEvents",value:function(t,e,i,n){var s=this.pswp,o=s.events,n=n?t+n:"";o.add(s.scrollWrap,t+e,this.onPointerDown.bind(this)),o.add(window,t+"move",this.onPointerMove.bind(this)),o.add(window,t+i,this.onPointerUp.bind(this)),n&&o.add(s.scrollWrap,n,this.onPointerUp.bind(this))}},{key:"onPointerDown",value:function(t){var e,i="mousedown"===t.type||"mouse"===t.pointerType;i&&0<t.button||((e=this.pswp).opener.isOpen?e.dispatch("pointerDown",{originalEvent:t}).defaultPrevented||(i&&(e.mouseDetected(),this._preventPointerEventBehaviour(t,"down")),e.animations.stopAll(),this._updatePoints(t,"down"),1===this._numActivePoints&&(this.dragAxis=null,equalizePoints(this.startP1,this.p1)),1<this._numActivePoints?(this._clearTapTimer(),this.isMultitouch=!0):this.isMultitouch=!1):t.preventDefault())}},{key:"onPointerMove",value:function(t){this._preventPointerEventBehaviour(t,"move"),this._numActivePoints&&(this._updatePoints(t,"move"),this.pswp.dispatch("pointerMove",{originalEvent:t}).defaultPrevented||(1!==this._numActivePoints||this.isDragging?1<this._numActivePoints&&!this.isZooming&&(this._finishDrag(),this.isZooming=!0,this._updateStartPoints(),this.zoomLevels.start(),this._rafStopLoop(),this._rafRenderLoop()):(this.dragAxis||this._calculateDragDirection(),this.dragAxis&&!this.isDragging&&(this.isZooming&&(this.isZooming=!1,this.zoomLevels.end()),this.isDragging=!0,this._clearTapTimer(),this._updateStartPoints(),this._intervalTime=Date.now(),this._velocityCalculated=!1,equalizePoints(this._intervalP1,this.p1),this.velocity.x=0,this.velocity.y=0,this.drag.start(),this._rafStopLoop(),this._rafRenderLoop()))))}},{key:"_finishDrag",value:function(){this.isDragging&&(this.isDragging=!1,this._velocityCalculated||this._updateVelocity(!0),this.drag.end(),this.dragAxis=null)}},{key:"onPointerUp",value:function(t){this._numActivePoints&&(this._updatePoints(t,"up"),this.pswp.dispatch("pointerUp",{originalEvent:t}).defaultPrevented||(0===this._numActivePoints&&(this._rafStopLoop(),this.isDragging?this._finishDrag():this.isZooming||this.isMultitouch||this._finishTap(t)),this._numActivePoints<2&&this.isZooming&&(this.isZooming=!1,this.zoomLevels.end(),1===this._numActivePoints)&&(this.dragAxis=null,this._updateStartPoints())))}},{key:"_rafRenderLoop",value:function(){(this.isDragging||this.isZooming)&&(this._updateVelocity(),this.isDragging?pointsEqual(this.p1,this.prevP1)||this.drag.change():pointsEqual(this.p1,this.prevP1)&&pointsEqual(this.p2,this.prevP2)||this.zoomLevels.change(),this._updatePrevPoints(),this.raf=requestAnimationFrame(this._rafRenderLoop.bind(this)))}},{key:"_updateVelocity",value:function(t){var e=Date.now(),i=e-this._intervalTime;i<50&&!t||(this.velocity.x=this._getVelocity("x",i),this.velocity.y=this._getVelocity("y",i),this._intervalTime=e,equalizePoints(this._intervalP1,this.p1),this._velocityCalculated=!0)}},{key:"_finishTap",value:function(t){var e=this,i=this.pswp.mainScroll;i.isShifted()?i.moveIndexBy(0,!0):0<t.type.indexOf("cancel")||("mouseup"===t.type||"mouse"===t.pointerType?this.tapHandler.click(this.startP1,t):(i=this.pswp.options.doubleTapAction?DOUBLE_TAP_DELAY:0,this._tapTimer?(this._clearTapTimer(),getDistanceBetween(this._lastStartP1,this.startP1)<MIN_TAP_DISTANCE&&this.tapHandler.doubleTap(this.startP1,t)):(equalizePoints(this._lastStartP1,this.startP1),this._tapTimer=setTimeout(function(){e.tapHandler.tap(e.startP1,t),e._clearTapTimer()},i))))}},{key:"_clearTapTimer",value:function(){this._tapTimer&&(clearTimeout(this._tapTimer),this._tapTimer=null)}},{key:"_getVelocity",value:function(t,e){t=this.p1[t]-this._intervalP1[t];return 1<Math.abs(t)&&5<e?t/e:0}},{key:"_rafStopLoop",value:function(){this.raf&&(cancelAnimationFrame(this.raf),this.raf=null)}},{key:"_preventPointerEventBehaviour",value:function(t,e){this.pswp.applyFilters("preventPointerEvent",!0,t,e)&&t.preventDefault()}},{key:"_updatePoints",value:function(t,e){var i,n;this._pointerEventEnabled?(i=t,n=this._ongoingPointers.findIndex(function(t){return t.id===i.pointerId}),"up"===e&&-1<n?this._ongoingPointers.splice(n,1):"down"===e&&-1===n?this._ongoingPointers.push(this._convertEventPosToPoint(i,{x:0,y:0})):-1<n&&this._convertEventPosToPoint(i,this._ongoingPointers[n]),this._numActivePoints=this._ongoingPointers.length,0<this._numActivePoints&&equalizePoints(this.p1,this._ongoingPointers[0]),1<this._numActivePoints&&equalizePoints(this.p2,this._ongoingPointers[1])):(n=t,this._numActivePoints=0,-1<n.type.indexOf("touch")?n.touches&&0<n.touches.length&&(this._convertEventPosToPoint(n.touches[0],this.p1),this._numActivePoints++,1<n.touches.length)&&(this._convertEventPosToPoint(n.touches[1],this.p2),this._numActivePoints++):(this._convertEventPosToPoint(t,this.p1),"up"===e?this._numActivePoints=0:this._numActivePoints++))}},{key:"_updatePrevPoints",value:function(){equalizePoints(this.prevP1,this.p1),equalizePoints(this.prevP2,this.p2)}},{key:"_updateStartPoints",value:function(){equalizePoints(this.startP1,this.p1),equalizePoints(this.startP2,this.p2),this._updatePrevPoints()}},{key:"_calculateDragDirection",value:function(){var t;this.pswp.mainScroll.isShifted()?this.dragAxis="x":0!=(t=Math.abs(this.p1.x-this.startP1.x)-Math.abs(this.p1.y-this.startP1.y))&&(t=0<t?"x":"y",Math.abs(this.p1[t]-this.startP1[t])>=AXIS_SWIPE_HYSTERISIS)&&(this.dragAxis=t)}},{key:"_convertEventPosToPoint",value:function(t,e){return e.x=t.pageX-this.pswp.offset.x,e.y=t.pageY-this.pswp.offset.y,"pointerId"in t?e.id=t.pointerId:void 0!==t.identifier&&(e.id=t.identifier),e}},{key:"_onClick",value:function(t){this.pswp.mainScroll.isShifted()&&(t.preventDefault(),t.stopPropagation())}}])}(),MAIN_SCROLL_END_FRICTION=.35,MainScroll=function(){return _createClass(function t(e){_classCallCheck(this,t),this.pswp=e,this.x=0,this.slideWidth=0,this._currPositionIndex=0,this._prevPositionIndex=0,this._containerShiftIndex=-1,this.itemHolders=[]},[{key:"resize",value:function(i){var n=this,t=this.pswp,t=Math.round(t.viewportSize.x+t.viewportSize.x*t.options.spacing),s=t!==this.slideWidth;s&&(this.slideWidth=t,this.moveTo(this.getCurrSlideX())),this.itemHolders.forEach(function(t,e){s&&setTransform(t.el,(e+n._containerShiftIndex)*n.slideWidth),i&&t.slide&&t.slide.resize()})}},{key:"resetPosition",value:function(){this._currPositionIndex=0,this._prevPositionIndex=0,this.slideWidth=0,this._containerShiftIndex=-1}},{key:"appendHolders",value:function(){this.itemHolders=[];for(var t=0;t<3;t++){var e=createElement("pswp__item","div",this.pswp.container);e.setAttribute("role","group"),e.setAttribute("aria-roledescription","slide"),e.setAttribute("aria-hidden","true"),e.style.display=1===t?"block":"none",this.itemHolders.push({el:e})}}},{key:"canBeSwiped",value:function(){return 1<this.pswp.getNumItems()}},{key:"moveIndexBy",value:function(t,e,i){var n=this,s=this.pswp,o=s.potentialIndex+t,a=s.getNumItems(),r=(t=s.canLoop()?(o=s.getLoopedIndex(o),(r=(t+a)%a)<=a/2?r:r-a):(o<0?o=0:a<=o&&(o=a-1),o-s.potentialIndex),s.potentialIndex=o,this._currPositionIndex-=t,s.animations.stopMainScroll(),this.getCurrSlideX());return e?(s.animations.startSpring({isMainScroll:!0,start:this.x,end:r,velocity:i||0,naturalFrequency:30,dampingRatio:1,onUpdate:function(t){n.moveTo(t)},onComplete:function(){n.updateCurrItem(),s.appendHeavy()}}),o=s.potentialIndex-s.currIndex,s.canLoop()&&(o=(e=(o+a)%a)<=a/2?e:e-a),1<Math.abs(o)&&this.updateCurrItem()):(this.moveTo(r),this.updateCurrItem()),Boolean(t)}},{key:"getCurrSlideX",value:function(){return this.slideWidth*this._currPositionIndex}},{key:"isShifted",value:function(){return this.x!==this.getCurrSlideX()}},{key:"updateCurrItem",value:function(){var t,e=this.pswp,i=this._prevPositionIndex-this._currPositionIndex;if(i){this._prevPositionIndex=this._currPositionIndex,e.currIndex=e.potentialIndex;var n,s=Math.abs(i);3<=s&&(this._containerShiftIndex+=i+(0<i?-3:3),s=3,this.itemHolders.forEach(function(t){var e;null!=(e=t.slide)&&e.destroy(),t.slide=void 0}));for(var o=0;o<s;o++)0<i?(n=this.itemHolders.shift())&&(this.itemHolders[2]=n,this._containerShiftIndex++,setTransform(n.el,(this._containerShiftIndex+2)*this.slideWidth),e.setContent(n,e.currIndex-s+o+2)):(n=this.itemHolders.pop())&&(this.itemHolders.unshift(n),this._containerShiftIndex--,setTransform(n.el,this._containerShiftIndex*this.slideWidth),e.setContent(n,e.currIndex+s-o-2));50<Math.abs(this._containerShiftIndex)&&!this.isShifted()&&(this.resetPosition(),this.resize()),e.animations.stopAllPan(),this.itemHolders.forEach(function(t,e){t.slide&&t.slide.setIsActive(1===e)}),e.currSlide=null==(t=this.itemHolders[1])?void 0:t.slide,e.contentLoader.updateLazy(i),e.currSlide&&e.currSlide.applyCurrentZoomPan(),e.dispatch("change")}}},{key:"moveTo",value:function(t,e){var i,n;!this.pswp.canLoop()&&e&&(i=(this.slideWidth*this._currPositionIndex-t)/this.slideWidth,i+=this.pswp.currIndex,n=Math.round(t-this.x),i<0&&0<n||i>=this.pswp.getNumItems()-1&&n<0)&&(t=this.x+n*MAIN_SCROLL_END_FRICTION),this.x=t,this.pswp.container&&setTransform(this.pswp.container,t),this.pswp.dispatch("moveMainScroll",{x:t,dragging:null!=e&&e})}}])}(),KeyboardKeyCodesMap={Escape:27,z:90,ArrowLeft:37,ArrowUp:38,ArrowRight:39,ArrowDown:40,Tab:9},getKeyboardEventKey=function(t,e){return e?t:KeyboardKeyCodesMap[t]},Keyboard=function(){return _createClass(function t(e){var i=this,n=(_classCallCheck(this,t),this.pswp=e,this._wasFocused=!1,e.on("bindEvents",function(){e.options.trapFocus&&(e.options.initialPointerPos||i._focusRoot(),e.events.add(document,"focusin",i._onFocusIn.bind(i))),e.events.add(document,"keydown",i._onKeyDown.bind(i))}),document.activeElement);e.on("destroy",function(){e.options.returnFocus&&n&&i._wasFocused&&n.focus()})},[{key:"_focusRoot",value:function(){!this._wasFocused&&this.pswp.element&&(this.pswp.element.focus(),this._wasFocused=!0)}},{key:"_onKeyDown",value:function(t){var e=this.pswp;if(!e.dispatch("keydown",{originalEvent:t}).defaultPrevented&&!specialKeyUsed(t)){var i,n,s=!1,o="key"in t;switch(o?t.key:t.keyCode){case getKeyboardEventKey("Escape",o):e.options.escKey&&(i="close");break;case getKeyboardEventKey("z",o):i="toggleZoom";break;case getKeyboardEventKey("ArrowLeft",o):n="x";break;case getKeyboardEventKey("ArrowUp",o):n="y";break;case getKeyboardEventKey("ArrowRight",o):n="x",s=!0;break;case getKeyboardEventKey("ArrowDown",o):s=!0,n="y";break;case getKeyboardEventKey("Tab",o):this._focusRoot()}n&&(t.preventDefault(),o=e.currSlide,e.options.arrowKeys&&"x"===n&&1<e.getNumItems()?i=s?"next":"prev":o&&o.currZoomLevel>o.zoomLevels.fit&&(o.pan[n]+=s?-80:80,o.panTo(o.pan.x,o.pan.y))),i&&(t.preventDefault(),e[i]())}}},{key:"_onFocusIn",value:function(t){var e=this.pswp.template;e&&document!==t.target&&e!==t.target&&!e.contains(t.target)&&e.focus()}}])}(),DEFAULT_EASING="cubic-bezier(.4,0,.22,1)",CSSAnimation=function(){return _createClass(function t(e){var i=this,n=(_classCallCheck(this,t),(this.props=e).target),s=e.onComplete,o=e.transform,a=e.onFinish,r=e.duration,l=void 0===r?333:r,r=e.easing,h=void 0===r?DEFAULT_EASING:r,c=(this.onFinish=void 0===a?function(){}:a,o?"transform":"opacity"),p=null!=(r=e[c])?r:"";this._target=n,this._onComplete=s,this._finished=!1,this._onTransitionEnd=this._onTransitionEnd.bind(this),this._helperTimeout=setTimeout(function(){setTransitionStyle(n,c,l,h),i._helperTimeout=setTimeout(function(){n.addEventListener("transitionend",i._onTransitionEnd,!1),n.addEventListener("transitioncancel",i._onTransitionEnd,!1),i._helperTimeout=setTimeout(function(){i._finalizeAnimation()},l+500),n.style[c]=p},30)},0)},[{key:"_onTransitionEnd",value:function(t){t.target===this._target&&this._finalizeAnimation()}},{key:"_finalizeAnimation",value:function(){this._finished||(this._finished=!0,this.onFinish(),this._onComplete&&this._onComplete())}},{key:"destroy",value:function(){this._helperTimeout&&clearTimeout(this._helperTimeout),removeTransitionStyle(this._target),this._target.removeEventListener("transitionend",this._onTransitionEnd,!1),this._target.removeEventListener("transitioncancel",this._onTransitionEnd,!1),this._finished||this._finalizeAnimation()}}])}(),DEFAULT_NATURAL_FREQUENCY=12,DEFAULT_DAMPING_RATIO=.75,SpringEaser=function(){return _createClass(function t(e,i,n){_classCallCheck(this,t),this.velocity=1e3*e,this._dampingRatio=i||DEFAULT_DAMPING_RATIO,this._naturalFrequency=n||DEFAULT_NATURAL_FREQUENCY,this._dampedFrequency=this._naturalFrequency,this._dampingRatio<1&&(this._dampedFrequency*=Math.sqrt(1-this._dampingRatio*this._dampingRatio))},[{key:"easeFrame",value:function(t,e){var i,n,s=0,o=(e/=1e3,Math.pow(Math.E,-this._dampingRatio*this._naturalFrequency*e));return 1===this._dampingRatio?(i=this.velocity+this._naturalFrequency*t,this.velocity=(s=(t+i*e)*o)*-this._naturalFrequency+i*o):this._dampingRatio<1&&(i=1/this._dampedFrequency*(this._dampingRatio*this._naturalFrequency*t+this.velocity),n=Math.cos(this._dampedFrequency*e),e=Math.sin(this._dampedFrequency*e),this.velocity=(s=o*(t*n+i*e))*-this._naturalFrequency*this._dampingRatio+o*(-this._dampedFrequency*t*e+this._dampedFrequency*i*n)),s}}])}(),SpringAnimation=function(){return _createClass(function t(e){var i=this,n=(_classCallCheck(this,t),this.props=e,this._raf=0,e.start),s=e.end,o=e.velocity,a=e.onUpdate,r=e.onComplete,l=e.onFinish,h=e.dampingRatio,e=e.naturalFrequency,c=(this.onFinish=void 0===l?function(){}:l,new SpringEaser(o,h,e)),p=Date.now(),u=n-s;this._raf=requestAnimationFrame(function t(){i._raf&&(u=c.easeFrame(u,Date.now()-p),Math.abs(u)<1&&Math.abs(c.velocity)<50?(a(s),r&&r(),i.onFinish()):(p=Date.now(),a(u+s),i._raf=requestAnimationFrame(t)))})},[{key:"destroy",value:function(){0<=this._raf&&cancelAnimationFrame(this._raf),this._raf=0}}])}(),Animations=function(){return _createClass(function t(){_classCallCheck(this,t),this.activeAnimations=[]},[{key:"startSpring",value:function(t){this._start(t,!0)}},{key:"startTransition",value:function(t){this._start(t)}},{key:"_start",value:function(t,e){var i=this,n=new(e?SpringAnimation:CSSAnimation)(t);return this.activeAnimations.push(n),n.onFinish=function(){return i.stop(n)},n}},{key:"stop",value:function(t){t.destroy();t=this.activeAnimations.indexOf(t);-1<t&&this.activeAnimations.splice(t,1)}},{key:"stopAll",value:function(){this.activeAnimations.forEach(function(t){t.destroy()}),this.activeAnimations=[]}},{key:"stopAllPan",value:function(){this.activeAnimations=this.activeAnimations.filter(function(t){return!t.props.isPan||(t.destroy(),!1)})}},{key:"stopMainScroll",value:function(){this.activeAnimations=this.activeAnimations.filter(function(t){return!t.props.isMainScroll||(t.destroy(),!1)})}},{key:"isPanRunning",value:function(){return this.activeAnimations.some(function(t){return t.props.isPan})}}])}(),ScrollWheel=function(){return _createClass(function t(e){_classCallCheck(this,t),(this.pswp=e).events.add(e.element,"wheel",this._onWheel.bind(this))},[{key:"_onWheel",value:function(t){t.preventDefault();var e,i=this.pswp.currSlide,n=t.deltaX,s=t.deltaY;i&&!this.pswp.dispatch("wheel",{originalEvent:t}).defaultPrevented&&(t.ctrlKey||this.pswp.options.wheelToZoom?i.isZoomable()&&(e=-s,1===t.deltaMode?e*=.05:e*=t.deltaMode?1:.002,e=Math.pow(2,e),e=i.currZoomLevel*e,i.zoomTo(e,{x:t.clientX,y:t.clientY})):i.isPannable()&&(1===t.deltaMode&&(n*=18,s*=18),i.panTo(i.pan.x-n,i.pan.y-s)))}}])}();function addElementHTML(t){var e;return"string"==typeof t?t:t&&t.isCustomSVG?(t=t,e=(e='<svg aria-hidden="true" class="pswp__icn" viewBox="0 0 %d %d" width="%d" height="%d">').split("%d").join(t.size||32),t.outlineID&&(e+='<use class="pswp__icn-shadow" xlink:href="#'+t.outlineID+'"/>'),e+t.inner+"</svg>"):""}var UIElement=_createClass(function t(e,i){_classCallCheck(this,t);var n,s,o,a=i.name||i.className,r=i.html;!1!==e.options[a]&&("string"==typeof e.options[a+"SVG"]&&(r=e.options[a+"SVG"]),e.dispatch("uiElementCreate",{data:i}),o="",i.isButton?o=(o+="pswp__button ")+(i.className||"pswp__button--".concat(i.name)):o+=i.className||"pswp__".concat(i.name),s=i.isButton?i.tagName||"button":i.tagName||"div",n=createElement(o,s=s.toLowerCase()),i.isButton&&("button"===s&&(n.type="button"),o=i.title,s=i.ariaLabel,(o="string"==typeof e.options[a+"Title"]?e.options[a+"Title"]:o)&&(n.title=o),a=s||o)&&n.setAttribute("aria-label",a),n.innerHTML=addElementHTML(r),i.onInit&&i.onInit(n,e),i.onClick&&(n.onclick=function(t){"string"==typeof i.onClick?e[i.onClick]():"function"==typeof i.onClick&&i.onClick(t,n,e)}),s=i.appendTo||"bar",o=e.element,"bar"===s?(e.topBar||(e.topBar=createElement("pswp__top-bar pswp__hide-on-close","div",e.scrollWrap)),o=e.topBar):(n.classList.add("pswp__hide-on-close"),"wrapper"===s&&(o=e.scrollWrap)),null!=(a=o))&&a.appendChild(e.applyFilters("uiElement",n,i))});function initArrowButton(t,e,i){t.classList.add("pswp__button--arrow"),t.setAttribute("aria-controls","pswp__items"),e.on("change",function(){e.options.loop||(t.disabled=i?!(e.currIndex<e.getNumItems()-1):!(0<e.currIndex))})}var arrowPrev={name:"arrowPrev",className:"pswp__button--arrow--prev",title:"Previous",order:10,isButton:!0,appendTo:"wrapper",html:{isCustomSVG:!0,size:60,inner:'<path d="M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z" id="pswp__icn-arrow"/>',outlineID:"pswp__icn-arrow"},onClick:"prev",onInit:initArrowButton},arrowNext={name:"arrowNext",className:"pswp__button--arrow--next",title:"Next",order:11,isButton:!0,appendTo:"wrapper",html:{isCustomSVG:!0,size:60,inner:'<use xlink:href="#pswp__icn-arrow"/>',outlineID:"pswp__icn-arrow"},onClick:"next",onInit:function(t,e){initArrowButton(t,e,!0)}},closeButton={name:"close",title:"Close",order:20,isButton:!0,html:{isCustomSVG:!0,inner:'<path d="M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z" id="pswp__icn-close"/>',outlineID:"pswp__icn-close"},onClick:"close"},zoomButton={name:"zoom",title:"Zoom",order:10,isButton:!0,html:{isCustomSVG:!0,inner:'<path d="M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z" id="pswp__icn-zoom"/><path fill="currentColor" class="pswp__zoom-icn-bar-h" d="M11 16v-2h6v2z"/><path fill="currentColor" class="pswp__zoom-icn-bar-v" d="M13 12h2v6h-2z"/>',outlineID:"pswp__icn-zoom"},onClick:"toggleZoom"},loadingIndicator={name:"preloader",appendTo:"bar",order:7,html:{isCustomSVG:!0,inner:'<path fill-rule="evenodd" clip-rule="evenodd" d="M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z" id="pswp__icn-loading"/>',outlineID:"pswp__icn-loading"},onInit:function(i,e){function n(t){o!==t&&r("active",o=t)}function s(){var t;null!=(t=e.currSlide)&&t.content.isLoading()?a=a||setTimeout(function(){var t;n(Boolean(null==(t=e.currSlide)?void 0:t.content.isLoading())),a=null},e.options.preloaderDelay):(n(!1),a&&(clearTimeout(a),a=null))}var o,a=null,r=function(t,e){i.classList.toggle("pswp__preloader--"+t,e)};e.on("change",s),e.on("loadComplete",function(t){e.currSlide===t.slide&&s()}),e.ui&&(e.ui.updatePreloaderVisibility=s)}},counterIndicator={name:"counter",order:5,onInit:function(t,e){e.on("change",function(){t.innerText=e.currIndex+1+e.options.indexIndicatorSep+e.getNumItems()})}};function setZoomedIn(t,e){t.classList.toggle("pswp--zoomed-in",e)}var UI=function(){return _createClass(function t(e){_classCallCheck(this,t),this.pswp=e,this.isRegistered=!1,this.uiElementsData=[],this.items=[],this.updatePreloaderVisibility=function(){},this._lastUpdatedZoomLevel=void 0},[{key:"init",value:function(){var e=this,i=this.pswp;this.isRegistered=!1,this.uiElementsData=[closeButton,arrowPrev,arrowNext,zoomButton,loadingIndicator,counterIndicator],i.dispatch("uiRegister"),this.uiElementsData.sort(function(t,e){return(t.order||0)-(e.order||0)}),this.items=[],this.isRegistered=!0,this.uiElementsData.forEach(function(t){e.registerElement(t)}),i.on("change",function(){var t;null!=(t=i.element)&&t.classList.toggle("pswp--one-slide",1===i.getNumItems())}),i.on("zoomPanUpdate",function(){return e._onZoomPanUpdate()})}},{key:"registerElement",value:function(t){this.isRegistered?this.items.push(new UIElement(this.pswp,t)):this.uiElementsData.push(t)}},{key:"_onZoomPanUpdate",value:function(){var t,e,i=this.pswp,n=i.template,s=i.currSlide,i=i.options;!this.pswp.opener.isClosing&&n&&s&&(t=s.currZoomLevel,(t=this.pswp.opener.isOpen?t:s.zoomLevels.initial)!==this._lastUpdatedZoomLevel)&&(this._lastUpdatedZoomLevel=t,e=s.zoomLevels.initial-s.zoomLevels.secondary,Math.abs(e)<.01||!s.isZoomable()?(setZoomedIn(n,!1),n.classList.remove("pswp--zoom-allowed")):(n.classList.add("pswp--zoom-allowed"),setZoomedIn(n,(t===s.zoomLevels.initial?s.zoomLevels.secondary:s.zoomLevels.initial)<=t),"zoom"!==i.imageClickAction&&"zoom-or-close"!==i.imageClickAction||n.classList.add("pswp--click-to-zoom")))}}])}();function getBoundsByElement(t){t=t.getBoundingClientRect();return{x:t.left,y:t.top,w:t.width}}function getCroppedBoundsByElement(t,e,i){var t=t.getBoundingClientRect(),n=t.width/e,s=t.height/i,n=s<n?n:s,s=(t.width-e*n)/2,i=(t.height-i*n)/2,e={x:t.left+s,y:t.top+i,w:e*n};return e.innerRect={w:t.width,h:t.height,x:s,y:i},e}function _getThumbBounds(t,e,i){var n,s,o=i.dispatch("thumbBounds",{index:t,itemData:e,instance:i});return o.thumbBounds||((o=e.element)&&!1!==i.options.thumbSelector&&(s=i.options.thumbSelector||"img",s=o.matches(s)?o:o.querySelector(s)),(s=i.applyFilters("thumbEl",s,e,t))&&(n=e.thumbCropped?getCroppedBoundsByElement(s,e.width||e.w||0,e.height||e.h||0):getBoundsByElement(s)),i.applyFilters("thumbBounds",n,e,t))}var PhotoSwipeEvent=function(){return _createClass(function t(e,i){_classCallCheck(this,t),this.type=e,this.defaultPrevented=!1,i&&Object.assign(this,i)},[{key:"preventDefault",value:function(){this.defaultPrevented=!0}}])}(),Eventable=function(){return _createClass(function t(){_classCallCheck(this,t),this._listeners={},this._filters={},this.pswp=void 0,this.options=void 0},[{key:"addFilter",value:function(t,e){var i,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:100;this._filters[t]||(this._filters[t]=[]),null!=(i=this._filters[t])&&i.push({fn:e,priority:n}),null!=(i=this._filters[t])&&i.sort(function(t,e){return t.priority-e.priority}),null!=(i=this.pswp)&&i.addFilter(t,e,n)}},{key:"removeFilter",value:function(t,e){this._filters[t]&&(this._filters[t]=this._filters[t].filter(function(t){return t.fn!==e})),this.pswp&&this.pswp.removeFilter(t,e)}},{key:"applyFilters",value:function(t){for(var e=this,i=arguments.length,n=new Array(1<i?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];return null!=(t=this._filters[t])&&t.forEach(function(t){n[0]=t.fn.apply(e,n)}),n[0]}},{key:"on",value:function(t,e){var i;this._listeners[t]||(this._listeners[t]=[]),null!=(i=this._listeners[t])&&i.push(e),null!=(i=this.pswp)&&i.on(t,e)}},{key:"off",value:function(t,e){var i;this._listeners[t]&&(this._listeners[t]=this._listeners[t].filter(function(t){return e!==t})),null!=(i=this.pswp)&&i.off(t,e)}},{key:"dispatch",value:function(t,e){var i,n=this;return this.pswp?this.pswp.dispatch(t,e):(i=new PhotoSwipeEvent(t,e),null!=(e=this._listeners[t])&&e.forEach(function(t){t.call(n,i)}),i)}}])}(),Placeholder=function(){return _createClass(function t(e,i){_classCallCheck(this,t),this.element=createElement("pswp__img pswp__img--placeholder",e?"img":"div",i),e&&((i=this.element).decoding="async",i.alt="",i.src=e,i.setAttribute("role","presentation")),this.element.setAttribute("aria-hidden","true")},[{key:"setDisplayedSize",value:function(t,e){this.element&&("IMG"===this.element.tagName?(setWidthHeight(this.element,250,"auto"),this.element.style.transformOrigin="0 0",this.element.style.transform=toTransformString(0,0,t/250)):setWidthHeight(this.element,t,e))}},{key:"destroy",value:function(){var t;null!=(t=this.element)&&t.parentNode&&this.element.remove(),this.element=null}}])}(),Content=function(){return _createClass(function t(e,i,n){_classCallCheck(this,t),this.instance=i,this.data=e,this.index=n,this.element=void 0,this.placeholder=void 0,this.slide=void 0,this.displayedImageWidth=0,this.displayedImageHeight=0,this.width=Number(this.data.w)||Number(this.data.width)||0,this.height=Number(this.data.h)||Number(this.data.height)||0,this.isAttached=!1,this.hasSlide=!1,this.isDecoding=!1,this.state=LOAD_STATE.IDLE,this.data.type?this.type=this.data.type:this.data.src?this.type="image":this.type="html",this.instance.dispatch("contentInit",{content:this})},[{key:"removePlaceholder",value:function(){var t=this;this.placeholder&&!this.keepPlaceholder()&&setTimeout(function(){t.placeholder&&(t.placeholder.destroy(),t.placeholder=void 0)},1e3)}},{key:"load",value:function(t,e){var i;this.slide&&this.usePlaceholder()&&(this.placeholder?(i=this.placeholder.element)&&!i.parentElement&&this.slide.container.prepend(i):(i=this.instance.applyFilters("placeholderSrc",!(!this.data.msrc||!this.slide.isFirstSlide)&&this.data.msrc,this),this.placeholder=new Placeholder(i,this.slide.container))),this.element&&!e||this.instance.dispatch("contentLoad",{content:this,isLazy:t}).defaultPrevented||(this.isImageContent()?(this.element=createElement("pswp__img","img"),this.displayedImageWidth&&this.loadImage(t)):(this.element=createElement("pswp__content","div"),this.element.innerHTML=this.data.html||""),e&&this.slide&&this.slide.updateContentSize(!0))}},{key:"loadImage",value:function(t){var e,i=this;this.isImageContent()&&this.element&&!this.instance.dispatch("contentLoadImage",{content:this,isLazy:t}).defaultPrevented&&(t=this.element,this.updateSrcsetSizes(),this.data.srcset&&(t.srcset=this.data.srcset),t.src=null!=(e=this.data.src)?e:"",t.alt=null!=(e=this.data.alt)?e:"",this.state=LOAD_STATE.LOADING,t.complete?this.onLoaded():(t.onload=function(){i.onLoaded()},t.onerror=function(){i.onError()}))}},{key:"setSlide",value:function(t){this.slide=t,this.hasSlide=!0,this.instance=t.pswp}},{key:"onLoaded",value:function(){this.state=LOAD_STATE.LOADED,this.slide&&this.element&&(this.instance.dispatch("loadComplete",{slide:this.slide,content:this}),this.slide.isActive&&this.slide.heavyAppended&&!this.element.parentNode&&(this.append(),this.slide.updateContentSize(!0)),this.state!==LOAD_STATE.LOADED&&this.state!==LOAD_STATE.ERROR||this.removePlaceholder())}},{key:"onError",value:function(){this.state=LOAD_STATE.ERROR,this.slide&&(this.displayError(),this.instance.dispatch("loadComplete",{slide:this.slide,isError:!0,content:this}),this.instance.dispatch("loadError",{slide:this.slide,content:this}))}},{key:"isLoading",value:function(){return this.instance.applyFilters("isContentLoading",this.state===LOAD_STATE.LOADING,this)}},{key:"isError",value:function(){return this.state===LOAD_STATE.ERROR}},{key:"isImageContent",value:function(){return"image"===this.type}},{key:"setDisplayedSize",value:function(t,e){var i;this.element&&(this.placeholder&&this.placeholder.setDisplayedSize(t,e),this.instance.dispatch("contentResize",{content:this,width:t,height:e}).defaultPrevented||(setWidthHeight(this.element,t,e),this.isImageContent()&&!this.isError()&&(i=!this.displayedImageWidth&&t,this.displayedImageWidth=t,this.displayedImageHeight=e,i?this.loadImage(!1):this.updateSrcsetSizes(),this.slide)&&this.instance.dispatch("imageSizeChange",{slide:this.slide,width:t,height:e,content:this})))}},{key:"isZoomable",value:function(){return this.instance.applyFilters("isContentZoomable",this.isImageContent()&&this.state!==LOAD_STATE.ERROR,this)}},{key:"updateSrcsetSizes",value:function(){var t,e;this.isImageContent()&&this.element&&this.data.srcset&&(t=this.element,e=this.instance.applyFilters("srcsetSizesWidth",this.displayedImageWidth,this),!t.dataset.largestUsedSize||e>parseInt(t.dataset.largestUsedSize,10))&&(t.sizes=e+"px",t.dataset.largestUsedSize=String(e))}},{key:"usePlaceholder",value:function(){return this.instance.applyFilters("useContentPlaceholder",this.isImageContent(),this)}},{key:"lazyLoad",value:function(){this.instance.dispatch("contentLazyLoad",{content:this}).defaultPrevented||this.load(!0)}},{key:"keepPlaceholder",value:function(){return this.instance.applyFilters("isKeepingPlaceholder",this.isLoading(),this)}},{key:"destroy",value:function(){this.hasSlide=!1,this.slide=void 0,this.instance.dispatch("contentDestroy",{content:this}).defaultPrevented||(this.remove(),this.placeholder&&(this.placeholder.destroy(),this.placeholder=void 0),this.isImageContent()&&this.element&&(this.element.onload=null,this.element.onerror=null,this.element=void 0))}},{key:"displayError",value:function(){var t,e;this.slide&&((e=createElement("pswp__error-msg","div")).innerText=null!=(t=null==(t=this.instance.options)?void 0:t.errorMsg)?t:"",e=this.instance.applyFilters("contentErrorElement",e,this),this.element=createElement("pswp__content pswp__error-msg-container","div"),this.element.appendChild(e),this.slide.container.innerText="",this.slide.container.appendChild(this.element),this.slide.updateContentSize(!0),this.removePlaceholder())}},{key:"append",value:function(){var t,e=this;!this.isAttached&&this.element&&(this.isAttached=!0,this.state===LOAD_STATE.ERROR?this.displayError():this.instance.dispatch("contentAppend",{content:this}).defaultPrevented||(t="decode"in this.element,this.isImageContent()?t&&this.slide&&(!this.slide.isActive||isSafari())?(this.isDecoding=!0,this.element.decode().catch(function(){}).finally(function(){e.isDecoding=!1,e.appendImage()})):this.appendImage():this.slide&&!this.element.parentNode&&this.slide.container.appendChild(this.element)))}},{key:"activate",value:function(){!this.instance.dispatch("contentActivate",{content:this}).defaultPrevented&&this.slide&&(this.isImageContent()&&this.isDecoding&&!isSafari()?this.appendImage():this.isError()&&this.load(!1,!0),this.slide.holderElement)&&this.slide.holderElement.setAttribute("aria-hidden","false")}},{key:"deactivate",value:function(){this.instance.dispatch("contentDeactivate",{content:this}),this.slide&&this.slide.holderElement&&this.slide.holderElement.setAttribute("aria-hidden","true")}},{key:"remove",value:function(){this.isAttached=!1,this.instance.dispatch("contentRemove",{content:this}).defaultPrevented||(this.element&&this.element.parentNode&&this.element.remove(),this.placeholder&&this.placeholder.element&&this.placeholder.element.remove())}},{key:"appendImage",value:function(){!this.isAttached||this.instance.dispatch("contentAppendImage",{content:this}).defaultPrevented||(this.slide&&this.element&&!this.element.parentNode&&this.slide.container.appendChild(this.element),this.state!==LOAD_STATE.LOADED&&this.state!==LOAD_STATE.ERROR)||this.removePlaceholder()}}])}(),MIN_SLIDES_TO_CACHE=5;function _lazyLoadData(t,e,i){var n,s=e.createContentFromData(t,i),o=e.options;return o&&(n=new ZoomLevel(o,t,-1),o=getPanAreaSize(o,e.pswp?e.pswp.viewportSize:getViewportSize(o,e),t,i),n.update(s.width,s.height,o)),s.lazyLoad(),n&&s.setDisplayedSize(Math.ceil(s.width*n.initial),Math.ceil(s.height*n.initial)),s}function lazyLoadSlide(t,e){var i=e.getItemData(t);if(!e.dispatch("lazyLoadSlide",{index:t,itemData:i}).defaultPrevented)return _lazyLoadData(i,e,t)}var ContentLoader=function(){return _createClass(function t(e){_classCallCheck(this,t),this.pswp=e,this.limit=Math.max(e.options.preload[0]+e.options.preload[1]+1,MIN_SLIDES_TO_CACHE),this._cachedItems=[]},[{key:"updateLazy",value:function(t){var e=this.pswp;if(!e.dispatch("lazyLoad").defaultPrevented){for(var i=e.options.preload,n=void 0===t||0<=t,s=0;s<=i[1];s++)this.loadSlideByIndex(e.currIndex+(n?s:-s));for(s=1;s<=i[0];s++)this.loadSlideByIndex(e.currIndex+(n?-s:s))}}},{key:"loadSlideByIndex",value:function(t){var t=this.pswp.getLoopedIndex(t);this.getContentByIndex(t)||(t=lazyLoadSlide(t,this.pswp))&&this.addToCache(t)}},{key:"getContentBySlide",value:function(t){var e=this.getContentByIndex(t.index);return e||(e=this.pswp.createContentFromData(t.data,t.index),this.addToCache(e)),e.setSlide(t),e}},{key:"addToCache",value:function(t){this.removeByIndex(t.index),this._cachedItems.push(t),this._cachedItems.length>this.limit&&-1!==(t=this._cachedItems.findIndex(function(t){return!t.isAttached&&!t.hasSlide}))&&this._cachedItems.splice(t,1)[0].destroy()}},{key:"removeByIndex",value:function(e){var t=this._cachedItems.findIndex(function(t){return t.index===e});-1!==t&&this._cachedItems.splice(t,1)}},{key:"getContentByIndex",value:function(e){return this._cachedItems.find(function(t){return t.index===e})}},{key:"destroy",value:function(){this._cachedItems.forEach(function(t){return t.destroy()}),this._cachedItems=[]}}])}(),PhotoSwipeBase=function(){function t(){return _classCallCheck(this,t),_callSuper(this,t,arguments)}return _inherits(t,Eventable),_createClass(t,[{key:"getNumItems",value:function(){var t=0,e=null==(e=this.options)?void 0:e.dataSource,t=(e&&"length"in e?t=e.length:e&&"gallery"in e&&(e.items||(e.items=this._getGalleryDOMElements(e.gallery)),e.items)&&(t=e.items.length),this.dispatch("numItems",{dataSource:e,numItems:t}));return this.applyFilters("numItems",t.numItems,e)}},{key:"createContentFromData",value:function(t,e){return new Content(t,this,e)}},{key:"getItemData",value:function(t){var e=null==(e=this.options)?void 0:e.dataSource,i={},e=(Array.isArray(e)?i=e[t]:e&&"gallery"in e&&(e.items||(e.items=this._getGalleryDOMElements(e.gallery)),i=e.items[t]),i),i=(e instanceof Element&&(e=this._domElementToItemData(e)),this.dispatch("itemData",{itemData:e||{},index:t}));return this.applyFilters("itemData",i.itemData,t)}},{key:"_getGalleryDOMElements",value:function(t){var e;return null!=(e=this.options)&&e.children||null!=(e=this.options)&&e.childSelector?getElementsFromOption(this.options.children,this.options.childSelector,t)||[]:[t]}},{key:"_domElementToItemData",value:function(t){var e,i={element:t},n="A"===t.tagName?t:t.querySelector("a");return n&&(i.src=n.dataset.pswpSrc||n.href,n.dataset.pswpSrcset&&(i.srcset=n.dataset.pswpSrcset),i.width=n.dataset.pswpWidth?parseInt(n.dataset.pswpWidth,10):0,i.height=n.dataset.pswpHeight?parseInt(n.dataset.pswpHeight,10):0,i.w=i.width,i.h=i.height,n.dataset.pswpType&&(i.type=n.dataset.pswpType),(e=t.querySelector("img"))&&(i.msrc=e.currentSrc||e.src,i.alt=null!=(e=e.getAttribute("alt"))?e:""),n.dataset.pswpCropped||n.dataset.cropped)&&(i.thumbCropped=!0),this.applyFilters("domItemData",i,t,n)}},{key:"lazyLoadData",value:function(t,e){return _lazyLoadData(t,this,e)}}])}(),MIN_OPACITY=.003,Opener=function(){return _createClass(function t(e){_classCallCheck(this,t),this.pswp=e,this.isClosed=!0,this.isOpen=!1,this.isClosing=!1,this.isOpening=!1,this._duration=void 0,this._useAnimation=!1,this._croppedZoom=!1,this._animateRootOpacity=!1,this._animateBgOpacity=!1,this._placeholder=void 0,this._opacityElement=void 0,this._cropContainer1=void 0,this._cropContainer2=void 0,this._thumbBounds=void 0,this._prepareOpen=this._prepareOpen.bind(this),e.on("firstZoomPan",this._prepareOpen)},[{key:"open",value:function(){this._prepareOpen(),this._start()}},{key:"close",value:function(){var t,e=this;this.isClosed||this.isClosing||this.isOpening||(t=this.pswp.currSlide,this.isOpen=!1,this.isOpening=!1,this.isClosing=!0,this._duration=this.pswp.options.hideAnimationDuration,t&&t.currZoomLevel*t.width>=this.pswp.options.maxWidthToAnimate&&(this._duration=0),this._applyStartProps(),setTimeout(function(){e._start()},this._croppedZoom?30:0))}},{key:"_prepareOpen",value:function(){var t;this.pswp.off("firstZoomPan",this._prepareOpen),this.isOpening||(t=this.pswp.currSlide,this.isOpening=!0,this.isClosing=!1,this._duration=this.pswp.options.showAnimationDuration,t&&t.zoomLevels.initial*t.width>=this.pswp.options.maxWidthToAnimate&&(this._duration=0),this._applyStartProps())}},{key:"_applyStartProps",value:function(){var t=this.pswp,e=this.pswp.currSlide,i=t.options;"fade"===i.showHideAnimationType?(i.showHideOpacity=!0,this._thumbBounds=void 0):"none"===i.showHideAnimationType?(i.showHideOpacity=!1,this._duration=0,this._thumbBounds=void 0):this.isOpening&&t._initialThumbBounds?this._thumbBounds=t._initialThumbBounds:this._thumbBounds=this.pswp.getThumbBounds(),this._placeholder=null==e?void 0:e.getPlaceholderElement(),t.animations.stopAll(),this._useAnimation=Boolean(this._duration&&50<this._duration),this._animateZoom=Boolean(this._thumbBounds)&&(null==e?void 0:e.content.usePlaceholder())&&(!this.isClosing||!t.mainScroll.isShifted()),this._animateZoom?this._animateRootOpacity=null!=(i=i.showHideOpacity)&&i:(this._animateRootOpacity=!0,this.isOpening&&e&&(e.zoomAndPanToInitial(),e.applyCurrentZoomPan())),this._animateBgOpacity=!this._animateRootOpacity&&this.pswp.options.bgOpacity>MIN_OPACITY,this._opacityElement=this._animateRootOpacity?t.element:t.bg,this._useAnimation?(this._animateZoom&&this._thumbBounds&&this._thumbBounds.innerRect?(this._croppedZoom=!0,this._cropContainer1=this.pswp.container,this._cropContainer2=null==(i=this.pswp.currSlide)?void 0:i.holderElement,t.container&&(t.container.style.overflow="hidden",t.container.style.width=t.viewportSize.x+"px")):this._croppedZoom=!1,this.isOpening?(this._animateRootOpacity?(t.element&&(t.element.style.opacity=String(MIN_OPACITY)),t.applyBgOpacity(1)):(this._animateBgOpacity&&t.bg&&(t.bg.style.opacity=String(MIN_OPACITY)),t.element&&(t.element.style.opacity="1")),this._animateZoom&&(this._setClosedStateZoomPan(),this._placeholder)&&(this._placeholder.style.willChange="transform",this._placeholder.style.opacity=String(MIN_OPACITY))):this.isClosing&&(t.mainScroll.itemHolders[0]&&(t.mainScroll.itemHolders[0].el.style.display="none"),t.mainScroll.itemHolders[2]&&(t.mainScroll.itemHolders[2].el.style.display="none"),this._croppedZoom)&&0!==t.mainScroll.x&&(t.mainScroll.resetPosition(),t.mainScroll.resize())):(this._duration=0,this._animateZoom=!1,this._animateBgOpacity=!1,this._animateRootOpacity=!0,this.isOpening&&(t.element&&(t.element.style.opacity=String(MIN_OPACITY)),t.applyBgOpacity(1)))}},{key:"_start",value:function(){var n=this;this.isOpening&&this._useAnimation&&this._placeholder&&"IMG"===this._placeholder.tagName?new Promise(function(t){var e=!1,i=!0;decodeImage(n._placeholder).finally(function(){e=!0,i||t(!0)}),setTimeout(function(){i=!1,e&&t(!0)},50),setTimeout(t,250)}).finally(function(){return n._initiate()}):this._initiate()}},{key:"_initiate",value:function(){var t;null!=(t=this.pswp.element)&&t.style.setProperty("--pswp-transition-duration",this._duration+"ms"),this.pswp.dispatch(this.isOpening?"openingAnimationStart":"closingAnimationStart"),this.pswp.dispatch("initialZoom"+(this.isOpening?"In":"Out")),null!=(t=this.pswp.element)&&t.classList.toggle("pswp--ui-visible",this.isOpening),this.isOpening?(this._placeholder&&(this._placeholder.style.opacity="1"),this._animateToOpenState()):this.isClosing&&this._animateToClosedState(),this._useAnimation||this._onAnimationComplete()}},{key:"_onAnimationComplete",value:function(){var t=this.pswp;this.isOpen=this.isOpening,this.isClosed=this.isClosing,this.isOpening=!1,this.isClosing=!1,t.dispatch(this.isOpen?"openingAnimationEnd":"closingAnimationEnd"),t.dispatch("initialZoom"+(this.isOpen?"InEnd":"OutEnd")),this.isClosed?t.destroy():this.isOpen&&(this._animateZoom&&t.container&&(t.container.style.overflow="visible",t.container.style.width="100%"),null!=(t=t.currSlide))&&t.applyCurrentZoomPan()}},{key:"_animateToOpenState",value:function(){var t=this.pswp;this._animateZoom&&(this._croppedZoom&&this._cropContainer1&&this._cropContainer2&&(this._animateTo(this._cropContainer1,"transform","translate3d(0,0,0)"),this._animateTo(this._cropContainer2,"transform","none")),t.currSlide)&&(t.currSlide.zoomAndPanToInitial(),this._animateTo(t.currSlide.container,"transform",t.currSlide.getCurrentTransform())),this._animateBgOpacity&&t.bg&&this._animateTo(t.bg,"opacity",String(t.options.bgOpacity)),this._animateRootOpacity&&t.element&&this._animateTo(t.element,"opacity","1")}},{key:"_animateToClosedState",value:function(){var t=this.pswp;this._animateZoom&&this._setClosedStateZoomPan(!0),this._animateBgOpacity&&.01<t.bgOpacity&&t.bg&&this._animateTo(t.bg,"opacity","0"),this._animateRootOpacity&&t.element&&this._animateTo(t.element,"opacity","0")}},{key:"_setClosedStateZoomPan",value:function(t){var e,i,n,s,o,a;this._thumbBounds&&(a=this.pswp,e=this._thumbBounds.innerRect,i=a.currSlide,a=a.viewportSize,this._croppedZoom&&e&&this._cropContainer1&&this._cropContainer2&&(n=-a.x+(this._thumbBounds.x-e.x)+e.w,s=-a.y+(this._thumbBounds.y-e.y)+e.h,o=a.x-e.w,a=a.y-e.h,t?(this._animateTo(this._cropContainer1,"transform",toTransformString(n,s)),this._animateTo(this._cropContainer2,"transform",toTransformString(o,a))):(setTransform(this._cropContainer1,n,s),setTransform(this._cropContainer2,o,a))),i)&&(equalizePoints(i.pan,e||this._thumbBounds),i.currZoomLevel=this._thumbBounds.w/i.width,t?this._animateTo(i.container,"transform",i.getCurrentTransform()):i.applyCurrentZoomPan())}},{key:"_animateTo",value:function(t,e,i){var n,s,o=this;this._duration?(n=this.pswp.animations,(s={duration:this._duration,easing:this.pswp.options.easing,onComplete:function(){n.activeAnimations.length||o._onAnimationComplete()},target:t})[e]=i,n.startTransition(s)):t.style[e]=i}}])}(),defaultOptions={allowPanToNext:!0,spacing:.1,loop:!0,pinchToClose:!0,closeOnVerticalDrag:!0,hideAnimationDuration:333,showAnimationDuration:333,zoomAnimationDuration:333,escKey:!0,arrowKeys:!0,trapFocus:!0,returnFocus:!0,maxWidthToAnimate:4e3,clickToCloseNonZoomable:!0,imageClickAction:"zoom-or-close",bgClickAction:"close",tapAction:"toggle-controls",doubleTapAction:"zoom",indexIndicatorSep:" / ",preloaderDelay:2e3,bgOpacity:.8,index:0,errorMsg:"The image cannot be loaded",preload:[1,2],easing:"cubic-bezier(.4,0,.22,1)"},PhotoSwipe=exports.default=function(){function i(t){var e;return _classCallCheck(this,i),(e=_callSuper(this,i)).options=e._prepareOptions(t||{}),e.offset={x:0,y:0},e._prevViewportSize={x:0,y:0},e.viewportSize={x:0,y:0},e.bgOpacity=1,e.currIndex=0,e.potentialIndex=0,e.isOpen=!1,e.isDestroying=!1,e.hasMouse=!1,e._initialItemData={},e._initialThumbBounds=void 0,e.topBar=void 0,e.element=void 0,e.template=void 0,e.container=void 0,e.scrollWrap=void 0,e.currSlide=void 0,e.events=new DOMEvents,e.animations=new Animations,e.mainScroll=new MainScroll(e),e.gestures=new Gestures(e),e.opener=new Opener(e),e.keyboard=new Keyboard(e),e.contentLoader=new ContentLoader(e),e}return _inherits(i,PhotoSwipeBase),_createClass(i,[{key:"init",value:function(){var e=this;if(this.isOpen||this.isDestroying)return!1;this.isOpen=!0,this.dispatch("init"),this.dispatch("beforeOpen"),this._createMainStructure();var t="pswp--open";return this.gestures.supportsTouch&&(t+=" pswp--touch"),this.options.mainClass&&(t+=" "+this.options.mainClass),this.element&&(this.element.className+=" "+t),this.currIndex=this.options.index||0,this.potentialIndex=this.currIndex,this.dispatch("firstUpdate"),this.scrollWheel=new ScrollWheel(this),(Number.isNaN(this.currIndex)||this.currIndex<0||this.currIndex>=this.getNumItems())&&(this.currIndex=0),this.gestures.supportsTouch||this.mouseDetected(),this.updateSize(),this.offset.y=window.pageYOffset,this._initialItemData=this.getItemData(this.currIndex),this.dispatch("gettingData",{index:this.currIndex,data:this._initialItemData,slide:void 0}),this._initialThumbBounds=this.getThumbBounds(),this.dispatch("initialLayout"),this.on("openingAnimationEnd",function(){var t=e.mainScroll.itemHolders;t[0]&&(t[0].el.style.display="block",e.setContent(t[0],e.currIndex-1)),t[2]&&(t[2].el.style.display="block",e.setContent(t[2],e.currIndex+1)),e.appendHeavy(),e.contentLoader.updateLazy(),e.events.add(window,"resize",e._handlePageResize.bind(e)),e.events.add(window,"scroll",e._updatePageScrollOffset.bind(e)),e.dispatch("bindEvents")}),this.mainScroll.itemHolders[1]&&this.setContent(this.mainScroll.itemHolders[1],this.currIndex),this.dispatch("change"),this.opener.open(),this.dispatch("afterInit"),!0}},{key:"getLoopedIndex",value:function(t){var e=this.getNumItems();return this.options.loop&&(e-1<t&&(t-=e),t<0)&&(t+=e),clamp(t,0,e-1)}},{key:"appendHeavy",value:function(){this.mainScroll.itemHolders.forEach(function(t){null!=(t=t.slide)&&t.appendHeavy()})}},{key:"goTo",value:function(t){this.mainScroll.moveIndexBy(this.getLoopedIndex(t)-this.potentialIndex)}},{key:"next",value:function(){this.goTo(this.potentialIndex+1)}},{key:"prev",value:function(){this.goTo(this.potentialIndex-1)}},{key:"zoomTo",value:function(){var t;null!=(t=this.currSlide)&&t.zoomTo.apply(t,arguments)}},{key:"toggleZoom",value:function(){var t;null!=(t=this.currSlide)&&t.toggleZoom()}},{key:"close",value:function(){this.opener.isOpen&&!this.isDestroying&&(this.isDestroying=!0,this.dispatch("close"),this.events.removeAll(),this.opener.close())}},{key:"destroy",value:function(){var t;this.isDestroying?(this.dispatch("destroy"),this._listeners={},this.scrollWrap&&(this.scrollWrap.ontouchmove=null,this.scrollWrap.ontouchend=null),null!=(t=this.element)&&t.remove(),this.mainScroll.itemHolders.forEach(function(t){null!=(t=t.slide)&&t.destroy()}),this.contentLoader.destroy(),this.events.removeAll()):(this.options.showHideAnimationType="none",this.close())}},{key:"refreshSlideContent",value:function(n){var s=this;this.contentLoader.removeByIndex(n),this.mainScroll.itemHolders.forEach(function(t,e){var i=(null!=(i=null==(i=s.currSlide)?void 0:i.index)?i:0)-1+e;(i=s.canLoop()?s.getLoopedIndex(i):i)===n&&(s.setContent(t,n,!0),1===e)&&(s.currSlide=t.slide,null!=(i=t.slide))&&i.setIsActive(!0)}),this.dispatch("change")}},{key:"setContent",value:function(t,e,i){if(this.canLoop()&&(e=this.getLoopedIndex(e)),t.slide){if(t.slide.index===e&&!i)return;t.slide.destroy(),t.slide=void 0}!this.canLoop()&&(e<0||e>=this.getNumItems())||(i=this.getItemData(e),t.slide=new Slide(i,e,this),e===this.currIndex&&(this.currSlide=t.slide),t.slide.append(t.el))}},{key:"getViewportCenterPoint",value:function(){return{x:this.viewportSize.x/2,y:this.viewportSize.y/2}}},{key:"updateSize",value:function(t){var e;this.isDestroying||(e=getViewportSize(this.options,this),!t&&pointsEqual(e,this._prevViewportSize))||(equalizePoints(this._prevViewportSize,e),this.dispatch("beforeResize"),equalizePoints(this.viewportSize,this._prevViewportSize),this._updatePageScrollOffset(),this.dispatch("viewportSize"),this.mainScroll.resize(this.opener.isOpen),!this.hasMouse&&window.matchMedia("(any-hover: hover)").matches&&this.mouseDetected(),this.dispatch("resize"))}},{key:"applyBgOpacity",value:function(t){this.bgOpacity=Math.max(t,0),this.bg&&(this.bg.style.opacity=String(this.bgOpacity*this.options.bgOpacity))}},{key:"mouseDetected",value:function(){var t;this.hasMouse||(this.hasMouse=!0,null!=(t=this.element)&&t.classList.add("pswp--has_mouse"))}},{key:"_handlePageResize",value:function(){var t=this;this.updateSize(),/iPhone|iPad|iPod/i.test(window.navigator.userAgent)&&setTimeout(function(){t.updateSize()},500)}},{key:"_updatePageScrollOffset",value:function(){this.setScrollOffset(0,window.pageYOffset)}},{key:"setScrollOffset",value:function(t,e){this.offset.x=t,this.offset.y=e,this.dispatch("updateScrollOffset")}},{key:"_createMainStructure",value:function(){this.element=createElement("pswp","div"),this.element.setAttribute("tabindex","-1"),this.element.setAttribute("role","dialog"),this.template=this.element,this.bg=createElement("pswp__bg","div",this.element),this.scrollWrap=createElement("pswp__scroll-wrap","section",this.element),this.container=createElement("pswp__container","div",this.scrollWrap),this.scrollWrap.setAttribute("aria-roledescription","carousel"),this.container.setAttribute("aria-live","off"),this.container.setAttribute("id","pswp__items"),this.mainScroll.appendHolders(),this.ui=new UI(this),this.ui.init(),(this.options.appendToEl||document.body).appendChild(this.element)}},{key:"getThumbBounds",value:function(){return _getThumbBounds(this.currIndex,this.currSlide?this.currSlide.data:this._initialItemData,this)}},{key:"canLoop",value:function(){return this.options.loop&&2<this.getNumItems()}},{key:"_prepareOptions",value:function(t){return window.matchMedia("(prefers-reduced-motion), (update: slow)").matches&&(t.showHideAnimationType="none",t.zoomAnimationDuration=0),_objectSpread(_objectSpread({},defaultOptions),t)}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
