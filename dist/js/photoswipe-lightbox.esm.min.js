"use strict";function _callSuper(t,e,i){return e=_getPrototypeOf(e),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(e,i||[],_getPrototypeOf(t).constructor):e.apply(t,i))}function _possibleConstructorReturn(t,e){if(e&&("object"==_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,i){return e&&_defineProperties(t.prototype,e),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"==_typeof(t)?t:t+""}function _toPrimitive(t,e){if("object"!=_typeof(t)||!t)return t;var i=t[Symbol.toPrimitive];if(void 0===i)return("string"===e?String:Number)(t);i=i.call(t,e||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}function createElement(t,e,i){e=document.createElement(e);return t&&(e.className=t),i&&i.appendChild(e),e}function toTransformString(t,e,i){t="translate3d(".concat(t,"px,").concat(e||0,"px,0)");return void 0!==i&&(t+=" scale3d(".concat(i,",").concat(i,",1)")),t}function setWidthHeight(t,e,i){t.style.width="number"==typeof e?"".concat(e,"px"):e,t.style.height="number"==typeof i?"".concat(i,"px"):i}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var LOAD_STATE={IDLE:"idle",LOADING:"loading",LOADED:"loaded",ERROR:"error"};function specialKeyUsed(t){return"button"in t&&1===t.button||t.ctrlKey||t.metaKey||t.altKey||t.shiftKey}function getElementsFromOption(t,e){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:document,n=[];return t instanceof Element?n=[t]:t instanceof NodeList||Array.isArray(t)?n=Array.from(t):(t="string"==typeof t?t:e)&&(n=Array.from(i.querySelectorAll(t))),n}function isPswpClass(t){return"function"==typeof t&&t.prototype&&t.prototype.goTo}function isSafari(){return!(!navigator.vendor||!navigator.vendor.match(/apple/i))}var PhotoSwipeEvent=function(){return _createClass(function t(e,i){_classCallCheck(this,t),this.type=e,this.defaultPrevented=!1,i&&Object.assign(this,i)},[{key:"preventDefault",value:function(){this.defaultPrevented=!0}}])}(),Eventable=function(){return _createClass(function t(){_classCallCheck(this,t),this._listeners={},this._filters={},this.pswp=void 0,this.options=void 0},[{key:"addFilter",value:function(t,e){var i,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:100;this._filters[t]||(this._filters[t]=[]),null!=(i=this._filters[t])&&i.push({fn:e,priority:n}),null!=(i=this._filters[t])&&i.sort(function(t,e){return t.priority-e.priority}),null!=(i=this.pswp)&&i.addFilter(t,e,n)}},{key:"removeFilter",value:function(t,e){this._filters[t]&&(this._filters[t]=this._filters[t].filter(function(t){return t.fn!==e})),this.pswp&&this.pswp.removeFilter(t,e)}},{key:"applyFilters",value:function(t){for(var e=this,i=arguments.length,n=new Array(1<i?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];return null!=(t=this._filters[t])&&t.forEach(function(t){n[0]=t.fn.apply(e,n)}),n[0]}},{key:"on",value:function(t,e){var i;this._listeners[t]||(this._listeners[t]=[]),null!=(i=this._listeners[t])&&i.push(e),null!=(i=this.pswp)&&i.on(t,e)}},{key:"off",value:function(t,e){var i;this._listeners[t]&&(this._listeners[t]=this._listeners[t].filter(function(t){return e!==t})),null!=(i=this.pswp)&&i.off(t,e)}},{key:"dispatch",value:function(t,e){var i,n=this;return this.pswp?this.pswp.dispatch(t,e):(i=new PhotoSwipeEvent(t,e),null!=(e=this._listeners[t])&&e.forEach(function(t){t.call(n,i)}),i)}}])}(),Placeholder=function(){return _createClass(function t(e,i){_classCallCheck(this,t),this.element=createElement("pswp__img pswp__img--placeholder",e?"img":"div",i),e&&((i=this.element).decoding="async",i.alt="",i.src=e,i.setAttribute("role","presentation")),this.element.setAttribute("aria-hidden","true")},[{key:"setDisplayedSize",value:function(t,e){this.element&&("IMG"===this.element.tagName?(setWidthHeight(this.element,250,"auto"),this.element.style.transformOrigin="0 0",this.element.style.transform=toTransformString(0,0,t/250)):setWidthHeight(this.element,t,e))}},{key:"destroy",value:function(){var t;null!=(t=this.element)&&t.parentNode&&this.element.remove(),this.element=null}}])}(),Content=function(){return _createClass(function t(e,i,n){_classCallCheck(this,t),this.instance=i,this.data=e,this.index=n,this.element=void 0,this.placeholder=void 0,this.slide=void 0,this.displayedImageWidth=0,this.displayedImageHeight=0,this.width=Number(this.data.w)||Number(this.data.width)||0,this.height=Number(this.data.h)||Number(this.data.height)||0,this.isAttached=!1,this.hasSlide=!1,this.isDecoding=!1,this.state=LOAD_STATE.IDLE,this.data.type?this.type=this.data.type:this.data.src?this.type="image":this.type="html",this.instance.dispatch("contentInit",{content:this})},[{key:"removePlaceholder",value:function(){var t=this;this.placeholder&&!this.keepPlaceholder()&&setTimeout(function(){t.placeholder&&(t.placeholder.destroy(),t.placeholder=void 0)},1e3)}},{key:"load",value:function(t,e){var i;this.slide&&this.usePlaceholder()&&(this.placeholder?(i=this.placeholder.element)&&!i.parentElement&&this.slide.container.prepend(i):(i=this.instance.applyFilters("placeholderSrc",!(!this.data.msrc||!this.slide.isFirstSlide)&&this.data.msrc,this),this.placeholder=new Placeholder(i,this.slide.container))),this.element&&!e||this.instance.dispatch("contentLoad",{content:this,isLazy:t}).defaultPrevented||(this.isImageContent()?(this.element=createElement("pswp__img","img"),this.displayedImageWidth&&this.loadImage(t)):(this.element=createElement("pswp__content","div"),this.element.innerHTML=this.data.html||""),e&&this.slide&&this.slide.updateContentSize(!0))}},{key:"loadImage",value:function(t){var e,i=this;this.isImageContent()&&this.element&&!this.instance.dispatch("contentLoadImage",{content:this,isLazy:t}).defaultPrevented&&(t=this.element,this.updateSrcsetSizes(),this.data.srcset&&(t.srcset=this.data.srcset),t.src=null!=(e=this.data.src)?e:"",t.alt=null!=(e=this.data.alt)?e:"",this.state=LOAD_STATE.LOADING,t.complete?this.onLoaded():(t.onload=function(){i.onLoaded()},t.onerror=function(){i.onError()}))}},{key:"setSlide",value:function(t){this.slide=t,this.hasSlide=!0,this.instance=t.pswp}},{key:"onLoaded",value:function(){this.state=LOAD_STATE.LOADED,this.slide&&this.element&&(this.instance.dispatch("loadComplete",{slide:this.slide,content:this}),this.slide.isActive&&this.slide.heavyAppended&&!this.element.parentNode&&(this.append(),this.slide.updateContentSize(!0)),this.state!==LOAD_STATE.LOADED&&this.state!==LOAD_STATE.ERROR||this.removePlaceholder())}},{key:"onError",value:function(){this.state=LOAD_STATE.ERROR,this.slide&&(this.displayError(),this.instance.dispatch("loadComplete",{slide:this.slide,isError:!0,content:this}),this.instance.dispatch("loadError",{slide:this.slide,content:this}))}},{key:"isLoading",value:function(){return this.instance.applyFilters("isContentLoading",this.state===LOAD_STATE.LOADING,this)}},{key:"isError",value:function(){return this.state===LOAD_STATE.ERROR}},{key:"isImageContent",value:function(){return"image"===this.type}},{key:"setDisplayedSize",value:function(t,e){var i;this.element&&(this.placeholder&&this.placeholder.setDisplayedSize(t,e),this.instance.dispatch("contentResize",{content:this,width:t,height:e}).defaultPrevented||(setWidthHeight(this.element,t,e),this.isImageContent()&&!this.isError()&&(i=!this.displayedImageWidth&&t,this.displayedImageWidth=t,this.displayedImageHeight=e,i?this.loadImage(!1):this.updateSrcsetSizes(),this.slide)&&this.instance.dispatch("imageSizeChange",{slide:this.slide,width:t,height:e,content:this})))}},{key:"isZoomable",value:function(){return this.instance.applyFilters("isContentZoomable",this.isImageContent()&&this.state!==LOAD_STATE.ERROR,this)}},{key:"updateSrcsetSizes",value:function(){var t,e;this.isImageContent()&&this.element&&this.data.srcset&&(t=this.element,e=this.instance.applyFilters("srcsetSizesWidth",this.displayedImageWidth,this),!t.dataset.largestUsedSize||e>parseInt(t.dataset.largestUsedSize,10))&&(t.sizes=e+"px",t.dataset.largestUsedSize=String(e))}},{key:"usePlaceholder",value:function(){return this.instance.applyFilters("useContentPlaceholder",this.isImageContent(),this)}},{key:"lazyLoad",value:function(){this.instance.dispatch("contentLazyLoad",{content:this}).defaultPrevented||this.load(!0)}},{key:"keepPlaceholder",value:function(){return this.instance.applyFilters("isKeepingPlaceholder",this.isLoading(),this)}},{key:"destroy",value:function(){this.hasSlide=!1,this.slide=void 0,this.instance.dispatch("contentDestroy",{content:this}).defaultPrevented||(this.remove(),this.placeholder&&(this.placeholder.destroy(),this.placeholder=void 0),this.isImageContent()&&this.element&&(this.element.onload=null,this.element.onerror=null,this.element=void 0))}},{key:"displayError",value:function(){var t,e;this.slide&&((e=createElement("pswp__error-msg","div")).innerText=null!=(t=null==(t=this.instance.options)?void 0:t.errorMsg)?t:"",e=this.instance.applyFilters("contentErrorElement",e,this),this.element=createElement("pswp__content pswp__error-msg-container","div"),this.element.appendChild(e),this.slide.container.innerText="",this.slide.container.appendChild(this.element),this.slide.updateContentSize(!0),this.removePlaceholder())}},{key:"append",value:function(){var t,e=this;!this.isAttached&&this.element&&(this.isAttached=!0,this.state===LOAD_STATE.ERROR?this.displayError():this.instance.dispatch("contentAppend",{content:this}).defaultPrevented||(t="decode"in this.element,this.isImageContent()?t&&this.slide&&(!this.slide.isActive||isSafari())?(this.isDecoding=!0,this.element.decode().catch(function(){}).finally(function(){e.isDecoding=!1,e.appendImage()})):this.appendImage():this.slide&&!this.element.parentNode&&this.slide.container.appendChild(this.element)))}},{key:"activate",value:function(){!this.instance.dispatch("contentActivate",{content:this}).defaultPrevented&&this.slide&&(this.isImageContent()&&this.isDecoding&&!isSafari()?this.appendImage():this.isError()&&this.load(!1,!0),this.slide.holderElement)&&this.slide.holderElement.setAttribute("aria-hidden","false")}},{key:"deactivate",value:function(){this.instance.dispatch("contentDeactivate",{content:this}),this.slide&&this.slide.holderElement&&this.slide.holderElement.setAttribute("aria-hidden","true")}},{key:"remove",value:function(){this.isAttached=!1,this.instance.dispatch("contentRemove",{content:this}).defaultPrevented||(this.element&&this.element.parentNode&&this.element.remove(),this.placeholder&&this.placeholder.element&&this.placeholder.element.remove())}},{key:"appendImage",value:function(){!this.isAttached||this.instance.dispatch("contentAppendImage",{content:this}).defaultPrevented||(this.slide&&this.element&&!this.element.parentNode&&this.slide.container.appendChild(this.element),this.state!==LOAD_STATE.LOADED&&this.state!==LOAD_STATE.ERROR)||this.removePlaceholder()}}])}();function getViewportSize(t,e){if(t.getViewportSizeFn){t=t.getViewportSizeFn(t,e);if(t)return t}return{x:document.documentElement.clientWidth,y:window.innerHeight}}function parsePaddingOption(t,e,i,n,s){var o=0;return e.paddingFn?o=e.paddingFn(i,n,s)[t]:e.padding?o=e.padding[t]:e[i="padding"+t[0].toUpperCase()+t.slice(1)]&&(o=e[i]),Number(o)||0}function getPanAreaSize(t,e,i,n){return{x:e.x-parsePaddingOption("left",t,e,i,n)-parsePaddingOption("right",t,e,i,n),y:e.y-parsePaddingOption("top",t,e,i,n)-parsePaddingOption("bottom",t,e,i,n)}}var MAX_IMAGE_WIDTH=4e3,ZoomLevel=function(){return _createClass(function t(e,i,n,s){_classCallCheck(this,t),this.pswp=s,this.options=e,this.itemData=i,this.index=n,this.panAreaSize=null,this.elementSize=null,this.fit=1,this.fill=1,this.vFill=1,this.initial=1,this.secondary=1,this.max=1,this.min=1},[{key:"update",value:function(t,e,i){t={x:t,y:e},this.elementSize=t,e=(this.panAreaSize=i).x/t.x,i=i.y/t.y;this.fit=Math.min(1,e<i?e:i),this.fill=Math.min(1,i<e?e:i),this.vFill=Math.min(1,i),this.initial=this._getInitial(),this.secondary=this._getSecondary(),this.max=Math.max(this.initial,this.secondary,this._getMax()),this.min=Math.min(this.fit,this.initial,this.secondary),this.pswp&&this.pswp.dispatch("zoomLevelsUpdate",{zoomLevels:this,slideData:this.itemData})}},{key:"_parseZoomLevelOption",value:function(t){t=this.options[t+"ZoomLevel"];if(t)return"function"==typeof t?t(this):"fill"===t?this.fill:"fit"===t?this.fit:Number(t)}},{key:"_getSecondary",value:function(){var t=this._parseZoomLevelOption("secondary");return t||(t=Math.min(1,3*this.fit),this.elementSize&&t*this.elementSize.x>MAX_IMAGE_WIDTH&&(t=MAX_IMAGE_WIDTH/this.elementSize.x)),t}},{key:"_getInitial",value:function(){return this._parseZoomLevelOption("initial")||this.fit}},{key:"_getMax",value:function(){return this._parseZoomLevelOption("max")||Math.max(1,4*this.fit)}}])}();function _lazyLoadData(t,e,i){var n,s=e.createContentFromData(t,i),o=e.options;return o&&(n=new ZoomLevel(o,t,-1),o=getPanAreaSize(o,e.pswp?e.pswp.viewportSize:getViewportSize(o,e),t,i),n.update(s.width,s.height,o)),s.lazyLoad(),n&&s.setDisplayedSize(Math.ceil(s.width*n.initial),Math.ceil(s.height*n.initial)),s}function lazyLoadSlide(t,e){var i=e.getItemData(t);if(!e.dispatch("lazyLoadSlide",{index:t,itemData:i}).defaultPrevented)return _lazyLoadData(i,e,t)}var PhotoSwipeBase=function(){function t(){return _classCallCheck(this,t),_callSuper(this,t,arguments)}return _inherits(t,Eventable),_createClass(t,[{key:"getNumItems",value:function(){var t=0,e=null==(e=this.options)?void 0:e.dataSource,t=(e&&"length"in e?t=e.length:e&&"gallery"in e&&(e.items||(e.items=this._getGalleryDOMElements(e.gallery)),e.items)&&(t=e.items.length),this.dispatch("numItems",{dataSource:e,numItems:t}));return this.applyFilters("numItems",t.numItems,e)}},{key:"createContentFromData",value:function(t,e){return new Content(t,this,e)}},{key:"getItemData",value:function(t){var e=null==(e=this.options)?void 0:e.dataSource,i={},e=(Array.isArray(e)?i=e[t]:e&&"gallery"in e&&(e.items||(e.items=this._getGalleryDOMElements(e.gallery)),i=e.items[t]),i),i=(e instanceof Element&&(e=this._domElementToItemData(e)),this.dispatch("itemData",{itemData:e||{},index:t}));return this.applyFilters("itemData",i.itemData,t)}},{key:"_getGalleryDOMElements",value:function(t){var e;return null!=(e=this.options)&&e.children||null!=(e=this.options)&&e.childSelector?getElementsFromOption(this.options.children,this.options.childSelector,t)||[]:[t]}},{key:"_domElementToItemData",value:function(t){var e,i={element:t},n="A"===t.tagName?t:t.querySelector("a");return n&&(i.src=n.dataset.pswpSrc||n.href,n.dataset.pswpSrcset&&(i.srcset=n.dataset.pswpSrcset),i.width=n.dataset.pswpWidth?parseInt(n.dataset.pswpWidth,10):0,i.height=n.dataset.pswpHeight?parseInt(n.dataset.pswpHeight,10):0,i.w=i.width,i.h=i.height,n.dataset.pswpType&&(i.type=n.dataset.pswpType),(e=t.querySelector("img"))&&(i.msrc=e.currentSrc||e.src,i.alt=null!=(e=e.getAttribute("alt"))?e:""),n.dataset.pswpCropped||n.dataset.cropped)&&(i.thumbCropped=!0),this.applyFilters("domItemData",i,t,n)}},{key:"lazyLoadData",value:function(t,e){return _lazyLoadData(t,this,e)}}])}(),PhotoSwipeLightbox=exports.default=function(){function i(t){var e;return _classCallCheck(this,i),(e=_callSuper(this,i)).options=t||{},e._uid=0,e.shouldOpen=!1,e._preloadedContent=void 0,e.onThumbnailsClick=e.onThumbnailsClick.bind(e),e}return _inherits(i,PhotoSwipeBase),_createClass(i,[{key:"init",value:function(){var e=this;getElementsFromOption(this.options.gallery,this.options.gallerySelector).forEach(function(t){t.addEventListener("click",e.onThumbnailsClick,!1)})}},{key:"onThumbnailsClick",value:function(t){var e,i,n;specialKeyUsed(t)||window.pswp||((e={x:t.clientX,y:t.clientY}).x||e.y||(e=null),i=this.getClickedIndex(t),i=this.applyFilters("clickedIndex",i,t,this),n={gallery:t.currentTarget},0<=i&&(t.preventDefault(),this.loadAndOpen(i,n,e)))}},{key:"getClickedIndex",value:function(t){var e;return this.options.getClickedIndexFn?this.options.getClickedIndexFn.call(this,t):(e=t.target,-1!==(t=getElementsFromOption(this.options.children,this.options.childSelector,t.currentTarget).findIndex(function(t){return t===e||t.contains(e)}))?t:this.options.children||this.options.childSelector?-1:0)}},{key:"loadAndOpen",value:function(t,e,i){var n;return!(window.pswp||!this.options||(!e&&this.options.gallery&&this.options.children&&(n=getElementsFromOption(this.options.gallery))[0]&&(e={gallery:n[0]}),this.options.index=t,this.options.initialPointerPos=i,this.shouldOpen=!0,this.preload(t,e),0))}},{key:"preload",value:function(t,e){var i=this,n=this.options,e=(e&&(n.dataSource=e),[]),s=_typeof(n.pswpModule);if(isPswpClass(n.pswpModule))e.push(Promise.resolve(n.pswpModule));else{if("string"===s)throw new Error("pswpModule as string is no longer supported");if("function"!==s)throw new Error("pswpModule is not valid");e.push(n.pswpModule())}"function"==typeof n.openPromise&&e.push(n.openPromise()),!1!==n.preloadFirstSlide&&0<=t&&(this._preloadedContent=lazyLoadSlide(t,this));var o=++this._uid;Promise.all(e).then(function(t){i.shouldOpen&&(t=t[0],i._openPhotoswipe(t,o))})}},{key:"_openPhotoswipe",value:function(t,e){var i,n=this;e!==this._uid&&this.shouldOpen||(this.shouldOpen=!1,window.pswp)||(i=new("object"===_typeof(t)?t.default:t)(this.options),this.pswp=i,window.pswp=i,Object.keys(this._listeners).forEach(function(e){var t;null!=(t=n._listeners[e])&&t.forEach(function(t){i.on(e,t)})}),Object.keys(this._filters).forEach(function(e){var t;null!=(t=n._filters[e])&&t.forEach(function(t){i.addFilter(e,t.fn,t.priority)})}),this._preloadedContent&&(i.contentLoader.addToCache(this._preloadedContent),this._preloadedContent=void 0),i.on("destroy",function(){n.pswp=void 0,delete window.pswp}),i.init())}},{key:"destroy",value:function(){var t,e=this;null!=(t=this.pswp)&&t.destroy(),this.shouldOpen=!1,this._listeners={},getElementsFromOption(this.options.gallery,this.options.gallerySelector).forEach(function(t){t.removeEventListener("click",e.onThumbnailsClick,!1)})}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
